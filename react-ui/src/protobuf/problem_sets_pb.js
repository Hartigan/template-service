/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var domain_pb = require('./domain_pb.js');
goog.exportSymbol('proto.problem_sets.CreateProblemSetReply', null, global);
goog.exportSymbol('proto.problem_sets.CreateProblemSetReply.Error', null, global);
goog.exportSymbol('proto.problem_sets.CreateProblemSetReply.Error.Status', null, global);
goog.exportSymbol('proto.problem_sets.CreateProblemSetRequest', null, global);
goog.exportSymbol('proto.problem_sets.GetProblemSetReply', null, global);
goog.exportSymbol('proto.problem_sets.GetProblemSetReply.Error', null, global);
goog.exportSymbol('proto.problem_sets.GetProblemSetReply.Error.Status', null, global);
goog.exportSymbol('proto.problem_sets.GetProblemSetRequest', null, global);
goog.exportSymbol('proto.problem_sets.UpdateProblemSetReply', null, global);
goog.exportSymbol('proto.problem_sets.UpdateProblemSetReply.Error', null, global);
goog.exportSymbol('proto.problem_sets.UpdateProblemSetReply.Error.Status', null, global);
goog.exportSymbol('proto.problem_sets.UpdateProblemSetRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.UpdateProblemSetReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problem_sets.UpdateProblemSetReply.oneofGroups_);
};
goog.inherits(proto.problem_sets.UpdateProblemSetReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.UpdateProblemSetReply.displayName = 'proto.problem_sets.UpdateProblemSetReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problem_sets.UpdateProblemSetReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problem_sets.UpdateProblemSetReply.ResultCase = {
  RESULT_NOT_SET: 0,
  COMMIT_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.problem_sets.UpdateProblemSetReply.ResultCase}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.getResultCase = function() {
  return /** @type {proto.problem_sets.UpdateProblemSetReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problem_sets.UpdateProblemSetReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.UpdateProblemSetReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.UpdateProblemSetReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.problem_sets.UpdateProblemSetReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.UpdateProblemSetReply}
 */
proto.problem_sets.UpdateProblemSetReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.UpdateProblemSetReply;
  return proto.problem_sets.UpdateProblemSetReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.UpdateProblemSetReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.UpdateProblemSetReply}
 */
proto.problem_sets.UpdateProblemSetReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 2:
      var value = new proto.problem_sets.UpdateProblemSetReply.Error;
      reader.readMessage(value,proto.problem_sets.UpdateProblemSetReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.UpdateProblemSetReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.UpdateProblemSetReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problem_sets.UpdateProblemSetReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.UpdateProblemSetReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.UpdateProblemSetReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.UpdateProblemSetReply.Error.displayName = 'proto.problem_sets.UpdateProblemSetReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.UpdateProblemSetReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.UpdateProblemSetReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.UpdateProblemSetReply.Error}
 */
proto.problem_sets.UpdateProblemSetReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.UpdateProblemSetReply.Error;
  return proto.problem_sets.UpdateProblemSetReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.UpdateProblemSetReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.UpdateProblemSetReply.Error}
 */
proto.problem_sets.UpdateProblemSetReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problem_sets.UpdateProblemSetReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.UpdateProblemSetReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.UpdateProblemSetReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problem_sets.UpdateProblemSetReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  INVALID_INPUT: 2
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problem_sets.UpdateProblemSetReply.Error.Status}
 */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problem_sets.UpdateProblemSetReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problem_sets.UpdateProblemSetReply.Error.Status} value */
proto.problem_sets.UpdateProblemSetReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.UpdateProblemSetReply.prototype.setCommitId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.problem_sets.UpdateProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.UpdateProblemSetReply.prototype.clearCommitId = function() {
  jspb.Message.setOneofField(this, 1, proto.problem_sets.UpdateProblemSetReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.hasCommitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problem_sets.UpdateProblemSetReply.Error}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.getError = function() {
  return /** @type{?proto.problem_sets.UpdateProblemSetReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problem_sets.UpdateProblemSetReply.Error, 2));
};


/** @param {?proto.problem_sets.UpdateProblemSetReply.Error|undefined} value */
proto.problem_sets.UpdateProblemSetReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problem_sets.UpdateProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.UpdateProblemSetReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.UpdateProblemSetReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.UpdateProblemSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.UpdateProblemSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.UpdateProblemSetRequest.displayName = 'proto.problem_sets.UpdateProblemSetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.UpdateProblemSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.UpdateProblemSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    problemSet: (f = msg.getProblemSet()) && domain_pb.ProblemSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.UpdateProblemSetRequest}
 */
proto.problem_sets.UpdateProblemSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.UpdateProblemSetRequest;
  return proto.problem_sets.UpdateProblemSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.UpdateProblemSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.UpdateProblemSetRequest}
 */
proto.problem_sets.UpdateProblemSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new domain_pb.ProblemSet;
      reader.readMessage(value,domain_pb.ProblemSet.deserializeBinaryFromReader);
      msg.setProblemSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.UpdateProblemSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.UpdateProblemSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.UpdateProblemSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProblemSet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.ProblemSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.UpdateProblemSetRequest.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.problem_sets.UpdateProblemSetRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional domain.ProblemSet problem_set = 3;
 * @return {?proto.domain.ProblemSet}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.getProblemSet = function() {
  return /** @type{?proto.domain.ProblemSet} */ (
    jspb.Message.getWrapperField(this, domain_pb.ProblemSet, 3));
};


/** @param {?proto.domain.ProblemSet|undefined} value */
proto.problem_sets.UpdateProblemSetRequest.prototype.setProblemSet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.problem_sets.UpdateProblemSetRequest.prototype.clearProblemSet = function() {
  this.setProblemSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.UpdateProblemSetRequest.prototype.hasProblemSet = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.CreateProblemSetReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problem_sets.CreateProblemSetReply.oneofGroups_);
};
goog.inherits(proto.problem_sets.CreateProblemSetReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.CreateProblemSetReply.displayName = 'proto.problem_sets.CreateProblemSetReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problem_sets.CreateProblemSetReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problem_sets.CreateProblemSetReply.ResultCase = {
  RESULT_NOT_SET: 0,
  HEAD_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.problem_sets.CreateProblemSetReply.ResultCase}
 */
proto.problem_sets.CreateProblemSetReply.prototype.getResultCase = function() {
  return /** @type {proto.problem_sets.CreateProblemSetReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problem_sets.CreateProblemSetReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.CreateProblemSetReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.CreateProblemSetReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.CreateProblemSetReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.problem_sets.CreateProblemSetReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.CreateProblemSetReply}
 */
proto.problem_sets.CreateProblemSetReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.CreateProblemSetReply;
  return proto.problem_sets.CreateProblemSetReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.CreateProblemSetReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.CreateProblemSetReply}
 */
proto.problem_sets.CreateProblemSetReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = new proto.problem_sets.CreateProblemSetReply.Error;
      reader.readMessage(value,proto.problem_sets.CreateProblemSetReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.CreateProblemSetReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.CreateProblemSetReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.CreateProblemSetReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problem_sets.CreateProblemSetReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.CreateProblemSetReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.CreateProblemSetReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.CreateProblemSetReply.Error.displayName = 'proto.problem_sets.CreateProblemSetReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.CreateProblemSetReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.CreateProblemSetReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.CreateProblemSetReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.CreateProblemSetReply.Error}
 */
proto.problem_sets.CreateProblemSetReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.CreateProblemSetReply.Error;
  return proto.problem_sets.CreateProblemSetReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.CreateProblemSetReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.CreateProblemSetReply.Error}
 */
proto.problem_sets.CreateProblemSetReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problem_sets.CreateProblemSetReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.CreateProblemSetReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.CreateProblemSetReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.CreateProblemSetReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problem_sets.CreateProblemSetReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  INVALID_INPUT: 2
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problem_sets.CreateProblemSetReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.CreateProblemSetReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problem_sets.CreateProblemSetReply.Error.Status}
 */
proto.problem_sets.CreateProblemSetReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problem_sets.CreateProblemSetReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problem_sets.CreateProblemSetReply.Error.Status} value */
proto.problem_sets.CreateProblemSetReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.problem_sets.CreateProblemSetReply.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.CreateProblemSetReply.prototype.setHeadId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.problem_sets.CreateProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.CreateProblemSetReply.prototype.clearHeadId = function() {
  jspb.Message.setOneofField(this, 1, proto.problem_sets.CreateProblemSetReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.CreateProblemSetReply.prototype.hasHeadId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problem_sets.CreateProblemSetReply.Error}
 */
proto.problem_sets.CreateProblemSetReply.prototype.getError = function() {
  return /** @type{?proto.problem_sets.CreateProblemSetReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problem_sets.CreateProblemSetReply.Error, 2));
};


/** @param {?proto.problem_sets.CreateProblemSetReply.Error|undefined} value */
proto.problem_sets.CreateProblemSetReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problem_sets.CreateProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.CreateProblemSetReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.CreateProblemSetReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.CreateProblemSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.CreateProblemSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.CreateProblemSetRequest.displayName = 'proto.problem_sets.CreateProblemSetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.CreateProblemSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.CreateProblemSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    problemSet: (f = msg.getProblemSet()) && domain_pb.ProblemSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.CreateProblemSetRequest}
 */
proto.problem_sets.CreateProblemSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.CreateProblemSetRequest;
  return proto.problem_sets.CreateProblemSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.CreateProblemSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.CreateProblemSetRequest}
 */
proto.problem_sets.CreateProblemSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new domain_pb.ProblemSet;
      reader.readMessage(value,domain_pb.ProblemSet.deserializeBinaryFromReader);
      msg.setProblemSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.CreateProblemSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.CreateProblemSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.CreateProblemSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProblemSet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.ProblemSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string folder_id = 1;
 * @return {string}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.CreateProblemSetRequest.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.problem_sets.CreateProblemSetRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional domain.ProblemSet problem_set = 3;
 * @return {?proto.domain.ProblemSet}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.getProblemSet = function() {
  return /** @type{?proto.domain.ProblemSet} */ (
    jspb.Message.getWrapperField(this, domain_pb.ProblemSet, 3));
};


/** @param {?proto.domain.ProblemSet|undefined} value */
proto.problem_sets.CreateProblemSetRequest.prototype.setProblemSet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.problem_sets.CreateProblemSetRequest.prototype.clearProblemSet = function() {
  this.setProblemSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.CreateProblemSetRequest.prototype.hasProblemSet = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.GetProblemSetReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problem_sets.GetProblemSetReply.oneofGroups_);
};
goog.inherits(proto.problem_sets.GetProblemSetReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.GetProblemSetReply.displayName = 'proto.problem_sets.GetProblemSetReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problem_sets.GetProblemSetReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problem_sets.GetProblemSetReply.ResultCase = {
  RESULT_NOT_SET: 0,
  PROBLEM_SET: 1,
  ERROR: 2
};

/**
 * @return {proto.problem_sets.GetProblemSetReply.ResultCase}
 */
proto.problem_sets.GetProblemSetReply.prototype.getResultCase = function() {
  return /** @type {proto.problem_sets.GetProblemSetReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problem_sets.GetProblemSetReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.GetProblemSetReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.GetProblemSetReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.GetProblemSetReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    problemSet: (f = msg.getProblemSet()) && domain_pb.ProblemSet.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.problem_sets.GetProblemSetReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.GetProblemSetReply}
 */
proto.problem_sets.GetProblemSetReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.GetProblemSetReply;
  return proto.problem_sets.GetProblemSetReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.GetProblemSetReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.GetProblemSetReply}
 */
proto.problem_sets.GetProblemSetReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.ProblemSet;
      reader.readMessage(value,domain_pb.ProblemSet.deserializeBinaryFromReader);
      msg.setProblemSet(value);
      break;
    case 2:
      var value = new proto.problem_sets.GetProblemSetReply.Error;
      reader.readMessage(value,proto.problem_sets.GetProblemSetReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.GetProblemSetReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.GetProblemSetReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.GetProblemSetReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProblemSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.ProblemSet.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problem_sets.GetProblemSetReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.GetProblemSetReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.GetProblemSetReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.GetProblemSetReply.Error.displayName = 'proto.problem_sets.GetProblemSetReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.GetProblemSetReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.GetProblemSetReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.GetProblemSetReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.GetProblemSetReply.Error}
 */
proto.problem_sets.GetProblemSetReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.GetProblemSetReply.Error;
  return proto.problem_sets.GetProblemSetReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.GetProblemSetReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.GetProblemSetReply.Error}
 */
proto.problem_sets.GetProblemSetReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problem_sets.GetProblemSetReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.GetProblemSetReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.GetProblemSetReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.GetProblemSetReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problem_sets.GetProblemSetReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  NO_COMMIT: 2,
  INVALID_TYPE: 3
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problem_sets.GetProblemSetReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.GetProblemSetReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problem_sets.GetProblemSetReply.Error.Status}
 */
proto.problem_sets.GetProblemSetReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problem_sets.GetProblemSetReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problem_sets.GetProblemSetReply.Error.Status} value */
proto.problem_sets.GetProblemSetReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.ProblemSet problem_set = 1;
 * @return {?proto.domain.ProblemSet}
 */
proto.problem_sets.GetProblemSetReply.prototype.getProblemSet = function() {
  return /** @type{?proto.domain.ProblemSet} */ (
    jspb.Message.getWrapperField(this, domain_pb.ProblemSet, 1));
};


/** @param {?proto.domain.ProblemSet|undefined} value */
proto.problem_sets.GetProblemSetReply.prototype.setProblemSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.problem_sets.GetProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.GetProblemSetReply.prototype.clearProblemSet = function() {
  this.setProblemSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.GetProblemSetReply.prototype.hasProblemSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problem_sets.GetProblemSetReply.Error}
 */
proto.problem_sets.GetProblemSetReply.prototype.getError = function() {
  return /** @type{?proto.problem_sets.GetProblemSetReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problem_sets.GetProblemSetReply.Error, 2));
};


/** @param {?proto.problem_sets.GetProblemSetReply.Error|undefined} value */
proto.problem_sets.GetProblemSetReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problem_sets.GetProblemSetReply.oneofGroups_[0], value);
};


proto.problem_sets.GetProblemSetReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problem_sets.GetProblemSetReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problem_sets.GetProblemSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problem_sets.GetProblemSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problem_sets.GetProblemSetRequest.displayName = 'proto.problem_sets.GetProblemSetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problem_sets.GetProblemSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problem_sets.GetProblemSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problem_sets.GetProblemSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problem_sets.GetProblemSetRequest}
 */
proto.problem_sets.GetProblemSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problem_sets.GetProblemSetRequest;
  return proto.problem_sets.GetProblemSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problem_sets.GetProblemSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problem_sets.GetProblemSetRequest}
 */
proto.problem_sets.GetProblemSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problem_sets.GetProblemSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problem_sets.GetProblemSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problem_sets.GetProblemSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problem_sets.GetProblemSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problem_sets.GetProblemSetRequest.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problem_sets.GetProblemSetRequest.prototype.setCommitId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.problem_sets);
