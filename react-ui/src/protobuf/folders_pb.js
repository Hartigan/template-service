/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var domain_pb = require('./domain_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.folders.CreateFolderReply', null, global);
goog.exportSymbol('proto.folders.CreateFolderReply.Error', null, global);
goog.exportSymbol('proto.folders.CreateFolderReply.Error.Status', null, global);
goog.exportSymbol('proto.folders.CreateFolderRequest', null, global);
goog.exportSymbol('proto.folders.GetFoldersReply', null, global);
goog.exportSymbol('proto.folders.GetFoldersReply.Entry', null, global);
goog.exportSymbol('proto.folders.GetFoldersReply.Status', null, global);
goog.exportSymbol('proto.folders.GetFoldersRequest', null, global);
goog.exportSymbol('proto.folders.GetRootReply', null, global);
goog.exportSymbol('proto.folders.GetRootReply.Error', null, global);
goog.exportSymbol('proto.folders.GetRootReply.Error.Status', null, global);
goog.exportSymbol('proto.folders.GetRootRequest', null, global);
goog.exportSymbol('proto.folders.GetTrashReply', null, global);
goog.exportSymbol('proto.folders.GetTrashReply.Error', null, global);
goog.exportSymbol('proto.folders.GetTrashReply.Error.Status', null, global);
goog.exportSymbol('proto.folders.GetTrashRequest', null, global);
goog.exportSymbol('proto.folders.MoveReply', null, global);
goog.exportSymbol('proto.folders.MoveReply.Error', null, global);
goog.exportSymbol('proto.folders.MoveReply.Error.Status', null, global);
goog.exportSymbol('proto.folders.MoveRequest', null, global);
goog.exportSymbol('proto.folders.MoveToTrashReply', null, global);
goog.exportSymbol('proto.folders.MoveToTrashReply.FolderEntry', null, global);
goog.exportSymbol('proto.folders.MoveToTrashReply.HeadEntry', null, global);
goog.exportSymbol('proto.folders.MoveToTrashReply.Status', null, global);
goog.exportSymbol('proto.folders.MoveToTrashRequest', null, global);
goog.exportSymbol('proto.folders.MoveToTrashRequest.FolderEntry', null, global);
goog.exportSymbol('proto.folders.MoveToTrashRequest.HeadEntry', null, global);
goog.exportSymbol('proto.folders.RenameReply', null, global);
goog.exportSymbol('proto.folders.RenameReply.Error', null, global);
goog.exportSymbol('proto.folders.RenameReply.Error.Status', null, global);
goog.exportSymbol('proto.folders.RenameRequest', null, global);
goog.exportSymbol('proto.folders.RestoreFromTrashReply', null, global);
goog.exportSymbol('proto.folders.RestoreFromTrashReply.FolderEntry', null, global);
goog.exportSymbol('proto.folders.RestoreFromTrashReply.HeadEntry', null, global);
goog.exportSymbol('proto.folders.RestoreFromTrashReply.Status', null, global);
goog.exportSymbol('proto.folders.RestoreFromTrashRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RenameReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.RenameReply.oneofGroups_);
};
goog.inherits(proto.folders.RenameReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RenameReply.displayName = 'proto.folders.RenameReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.RenameReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.folders.RenameReply.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.folders.RenameReply.ResultCase}
 */
proto.folders.RenameReply.prototype.getResultCase = function() {
  return /** @type {proto.folders.RenameReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.folders.RenameReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RenameReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RenameReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RenameReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && google_protobuf_empty_pb.Empty.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.folders.RenameReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RenameReply}
 */
proto.folders.RenameReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RenameReply;
  return proto.folders.RenameReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RenameReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RenameReply}
 */
proto.folders.RenameReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_empty_pb.Empty;
      reader.readMessage(value,google_protobuf_empty_pb.Empty.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.folders.RenameReply.Error;
      reader.readMessage(value,proto.folders.RenameReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RenameReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RenameReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RenameReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_empty_pb.Empty.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.folders.RenameReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RenameReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.RenameReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RenameReply.Error.displayName = 'proto.folders.RenameReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RenameReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RenameReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RenameReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RenameReply.Error}
 */
proto.folders.RenameReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RenameReply.Error;
  return proto.folders.RenameReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RenameReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RenameReply.Error}
 */
proto.folders.RenameReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.RenameReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RenameReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RenameReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RenameReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.RenameReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.folders.RenameReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.RenameReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.RenameReply.Error.Status}
 */
proto.folders.RenameReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.folders.RenameReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.RenameReply.Error.Status} value */
proto.folders.RenameReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Empty ok = 1;
 * @return {?proto.google.protobuf.Empty}
 */
proto.folders.RenameReply.prototype.getOk = function() {
  return /** @type{?proto.google.protobuf.Empty} */ (
    jspb.Message.getWrapperField(this, google_protobuf_empty_pb.Empty, 1));
};


/** @param {?proto.google.protobuf.Empty|undefined} value */
proto.folders.RenameReply.prototype.setOk = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.folders.RenameReply.oneofGroups_[0], value);
};


proto.folders.RenameReply.prototype.clearOk = function() {
  this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.RenameReply.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.folders.RenameReply.Error}
 */
proto.folders.RenameReply.prototype.getError = function() {
  return /** @type{?proto.folders.RenameReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.folders.RenameReply.Error, 2));
};


/** @param {?proto.folders.RenameReply.Error|undefined} value */
proto.folders.RenameReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.folders.RenameReply.oneofGroups_[0], value);
};


proto.folders.RenameReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.RenameReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RenameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.RenameRequest.oneofGroups_);
};
goog.inherits(proto.folders.RenameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RenameRequest.displayName = 'proto.folders.RenameRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.RenameRequest.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.folders.RenameRequest.TargetCase = {
  TARGET_NOT_SET: 0,
  HEAD_ID: 3,
  FOLDER_ID: 4
};

/**
 * @return {proto.folders.RenameRequest.TargetCase}
 */
proto.folders.RenameRequest.prototype.getTargetCase = function() {
  return /** @type {proto.folders.RenameRequest.TargetCase} */(jspb.Message.computeOneofCase(this, proto.folders.RenameRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RenameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RenameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RenameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    folderId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RenameRequest}
 */
proto.folders.RenameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RenameRequest;
  return proto.folders.RenameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RenameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RenameRequest}
 */
proto.folders.RenameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RenameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RenameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RenameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RenameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string parent_id = 1;
 * @return {string}
 */
proto.folders.RenameRequest.prototype.getParentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.RenameRequest.prototype.setParentId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.folders.RenameRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.folders.RenameRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string head_id = 3;
 * @return {string}
 */
proto.folders.RenameRequest.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.folders.RenameRequest.prototype.setHeadId = function(value) {
  jspb.Message.setOneofField(this, 3, proto.folders.RenameRequest.oneofGroups_[0], value);
};


proto.folders.RenameRequest.prototype.clearHeadId = function() {
  jspb.Message.setOneofField(this, 3, proto.folders.RenameRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.RenameRequest.prototype.hasHeadId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string folder_id = 4;
 * @return {string}
 */
proto.folders.RenameRequest.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.folders.RenameRequest.prototype.setFolderId = function(value) {
  jspb.Message.setOneofField(this, 4, proto.folders.RenameRequest.oneofGroups_[0], value);
};


proto.folders.RenameRequest.prototype.clearFolderId = function() {
  jspb.Message.setOneofField(this, 4, proto.folders.RenameRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.RenameRequest.prototype.hasFolderId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.MoveReply.oneofGroups_);
};
goog.inherits(proto.folders.MoveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveReply.displayName = 'proto.folders.MoveReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.MoveReply.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.folders.MoveReply.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 1
};

/**
 * @return {proto.folders.MoveReply.ResultCase}
 */
proto.folders.MoveReply.prototype.getResultCase = function() {
  return /** @type {proto.folders.MoveReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.folders.MoveReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.folders.MoveReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveReply}
 */
proto.folders.MoveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveReply;
  return proto.folders.MoveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveReply}
 */
proto.folders.MoveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.folders.MoveReply.Error;
      reader.readMessage(value,proto.folders.MoveReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.folders.MoveReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.MoveReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveReply.Error.displayName = 'proto.folders.MoveReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveReply.Error}
 */
proto.folders.MoveReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveReply.Error;
  return proto.folders.MoveReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveReply.Error}
 */
proto.folders.MoveReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.MoveReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.MoveReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.folders.MoveReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.MoveReply.Error.Status}
 */
proto.folders.MoveReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.folders.MoveReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.MoveReply.Error.Status} value */
proto.folders.MoveReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.folders.MoveReply.Error}
 */
proto.folders.MoveReply.prototype.getError = function() {
  return /** @type{?proto.folders.MoveReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.folders.MoveReply.Error, 1));
};


/** @param {?proto.folders.MoveReply.Error|undefined} value */
proto.folders.MoveReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.folders.MoveReply.oneofGroups_[0], value);
};


proto.folders.MoveReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.MoveReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.MoveRequest.oneofGroups_);
};
goog.inherits(proto.folders.MoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveRequest.displayName = 'proto.folders.MoveRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.MoveRequest.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.folders.MoveRequest.TargetCase = {
  TARGET_NOT_SET: 0,
  HEAD_ID: 3,
  FOLDER_ID: 4
};

/**
 * @return {proto.folders.MoveRequest.TargetCase}
 */
proto.folders.MoveRequest.prototype.getTargetCase = function() {
  return /** @type {proto.folders.MoveRequest.TargetCase} */(jspb.Message.computeOneofCase(this, proto.folders.MoveRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    folderId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveRequest}
 */
proto.folders.MoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveRequest;
  return proto.folders.MoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveRequest}
 */
proto.folders.MoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string source_id = 1;
 * @return {string}
 */
proto.folders.MoveRequest.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveRequest.prototype.setSourceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination_id = 2;
 * @return {string}
 */
proto.folders.MoveRequest.prototype.getDestinationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.folders.MoveRequest.prototype.setDestinationId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string head_id = 3;
 * @return {string}
 */
proto.folders.MoveRequest.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.folders.MoveRequest.prototype.setHeadId = function(value) {
  jspb.Message.setOneofField(this, 3, proto.folders.MoveRequest.oneofGroups_[0], value);
};


proto.folders.MoveRequest.prototype.clearHeadId = function() {
  jspb.Message.setOneofField(this, 3, proto.folders.MoveRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.MoveRequest.prototype.hasHeadId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string folder_id = 4;
 * @return {string}
 */
proto.folders.MoveRequest.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.folders.MoveRequest.prototype.setFolderId = function(value) {
  jspb.Message.setOneofField(this, 4, proto.folders.MoveRequest.oneofGroups_[0], value);
};


proto.folders.MoveRequest.prototype.clearFolderId = function() {
  jspb.Message.setOneofField(this, 4, proto.folders.MoveRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.MoveRequest.prototype.hasFolderId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RestoreFromTrashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.RestoreFromTrashRequest.repeatedFields_, null);
};
goog.inherits(proto.folders.RestoreFromTrashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RestoreFromTrashRequest.displayName = 'proto.folders.RestoreFromTrashRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.RestoreFromTrashRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RestoreFromTrashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RestoreFromTrashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RestoreFromTrashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    headsList: jspb.Message.getRepeatedField(msg, 1),
    foldersList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RestoreFromTrashRequest}
 */
proto.folders.RestoreFromTrashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RestoreFromTrashRequest;
  return proto.folders.RestoreFromTrashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RestoreFromTrashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RestoreFromTrashRequest}
 */
proto.folders.RestoreFromTrashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeads(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFolders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RestoreFromTrashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RestoreFromTrashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RestoreFromTrashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string heads = 1;
 * @return {!Array.<string>}
 */
proto.folders.RestoreFromTrashRequest.prototype.getHeadsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.folders.RestoreFromTrashRequest.prototype.setHeadsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.folders.RestoreFromTrashRequest.prototype.addHeads = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.folders.RestoreFromTrashRequest.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};


/**
 * repeated string folders = 2;
 * @return {!Array.<string>}
 */
proto.folders.RestoreFromTrashRequest.prototype.getFoldersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.folders.RestoreFromTrashRequest.prototype.setFoldersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.folders.RestoreFromTrashRequest.prototype.addFolders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.folders.RestoreFromTrashRequest.prototype.clearFoldersList = function() {
  this.setFoldersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RestoreFromTrashReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.RestoreFromTrashReply.repeatedFields_, null);
};
goog.inherits(proto.folders.RestoreFromTrashReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RestoreFromTrashReply.displayName = 'proto.folders.RestoreFromTrashReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.RestoreFromTrashReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RestoreFromTrashReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RestoreFromTrashReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RestoreFromTrashReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    headsList: jspb.Message.toObjectList(msg.getHeadsList(),
    proto.folders.RestoreFromTrashReply.HeadEntry.toObject, includeInstance),
    foldersList: jspb.Message.toObjectList(msg.getFoldersList(),
    proto.folders.RestoreFromTrashReply.FolderEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RestoreFromTrashReply}
 */
proto.folders.RestoreFromTrashReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RestoreFromTrashReply;
  return proto.folders.RestoreFromTrashReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RestoreFromTrashReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RestoreFromTrashReply}
 */
proto.folders.RestoreFromTrashReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.folders.RestoreFromTrashReply.HeadEntry;
      reader.readMessage(value,proto.folders.RestoreFromTrashReply.HeadEntry.deserializeBinaryFromReader);
      msg.addHeads(value);
      break;
    case 2:
      var value = new proto.folders.RestoreFromTrashReply.FolderEntry;
      reader.readMessage(value,proto.folders.RestoreFromTrashReply.FolderEntry.deserializeBinaryFromReader);
      msg.addFolders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RestoreFromTrashReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RestoreFromTrashReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RestoreFromTrashReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.folders.RestoreFromTrashReply.HeadEntry.serializeBinaryToWriter
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.folders.RestoreFromTrashReply.FolderEntry.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.RestoreFromTrashReply.Status = {
  OK: 0,
  UNKNOWN: 1,
  NO_ACCESS: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RestoreFromTrashReply.HeadEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.RestoreFromTrashReply.HeadEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RestoreFromTrashReply.HeadEntry.displayName = 'proto.folders.RestoreFromTrashReply.HeadEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RestoreFromTrashReply.HeadEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RestoreFromTrashReply.HeadEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.HeadEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RestoreFromTrashReply.HeadEntry}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RestoreFromTrashReply.HeadEntry;
  return proto.folders.RestoreFromTrashReply.HeadEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RestoreFromTrashReply.HeadEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RestoreFromTrashReply.HeadEntry}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.RestoreFromTrashReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RestoreFromTrashReply.HeadEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RestoreFromTrashReply.HeadEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.HeadEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.RestoreFromTrashReply.Status}
 */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.getStatus = function() {
  return /** @type {!proto.folders.RestoreFromTrashReply.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.RestoreFromTrashReply.Status} value */
proto.folders.RestoreFromTrashReply.HeadEntry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.RestoreFromTrashReply.FolderEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.RestoreFromTrashReply.FolderEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.RestoreFromTrashReply.FolderEntry.displayName = 'proto.folders.RestoreFromTrashReply.FolderEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.RestoreFromTrashReply.FolderEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.RestoreFromTrashReply.FolderEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.FolderEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.RestoreFromTrashReply.FolderEntry}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.RestoreFromTrashReply.FolderEntry;
  return proto.folders.RestoreFromTrashReply.FolderEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.RestoreFromTrashReply.FolderEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.RestoreFromTrashReply.FolderEntry}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.RestoreFromTrashReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.RestoreFromTrashReply.FolderEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.RestoreFromTrashReply.FolderEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.RestoreFromTrashReply.FolderEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string folder_id = 1;
 * @return {string}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.RestoreFromTrashReply.Status}
 */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.getStatus = function() {
  return /** @type {!proto.folders.RestoreFromTrashReply.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.RestoreFromTrashReply.Status} value */
proto.folders.RestoreFromTrashReply.FolderEntry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated HeadEntry heads = 1;
 * @return {!Array.<!proto.folders.RestoreFromTrashReply.HeadEntry>}
 */
proto.folders.RestoreFromTrashReply.prototype.getHeadsList = function() {
  return /** @type{!Array.<!proto.folders.RestoreFromTrashReply.HeadEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.RestoreFromTrashReply.HeadEntry, 1));
};


/** @param {!Array.<!proto.folders.RestoreFromTrashReply.HeadEntry>} value */
proto.folders.RestoreFromTrashReply.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.folders.RestoreFromTrashReply.HeadEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.RestoreFromTrashReply.HeadEntry}
 */
proto.folders.RestoreFromTrashReply.prototype.addHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.folders.RestoreFromTrashReply.HeadEntry, opt_index);
};


proto.folders.RestoreFromTrashReply.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};


/**
 * repeated FolderEntry folders = 2;
 * @return {!Array.<!proto.folders.RestoreFromTrashReply.FolderEntry>}
 */
proto.folders.RestoreFromTrashReply.prototype.getFoldersList = function() {
  return /** @type{!Array.<!proto.folders.RestoreFromTrashReply.FolderEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.RestoreFromTrashReply.FolderEntry, 2));
};


/** @param {!Array.<!proto.folders.RestoreFromTrashReply.FolderEntry>} value */
proto.folders.RestoreFromTrashReply.prototype.setFoldersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.folders.RestoreFromTrashReply.FolderEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.RestoreFromTrashReply.FolderEntry}
 */
proto.folders.RestoreFromTrashReply.prototype.addFolders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.folders.RestoreFromTrashReply.FolderEntry, opt_index);
};


proto.folders.RestoreFromTrashReply.prototype.clearFoldersList = function() {
  this.setFoldersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.MoveToTrashReply.repeatedFields_, null);
};
goog.inherits(proto.folders.MoveToTrashReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashReply.displayName = 'proto.folders.MoveToTrashReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.MoveToTrashReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    headsList: jspb.Message.toObjectList(msg.getHeadsList(),
    proto.folders.MoveToTrashReply.HeadEntry.toObject, includeInstance),
    foldersList: jspb.Message.toObjectList(msg.getFoldersList(),
    proto.folders.MoveToTrashReply.FolderEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashReply}
 */
proto.folders.MoveToTrashReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashReply;
  return proto.folders.MoveToTrashReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashReply}
 */
proto.folders.MoveToTrashReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.folders.MoveToTrashReply.HeadEntry;
      reader.readMessage(value,proto.folders.MoveToTrashReply.HeadEntry.deserializeBinaryFromReader);
      msg.addHeads(value);
      break;
    case 2:
      var value = new proto.folders.MoveToTrashReply.FolderEntry;
      reader.readMessage(value,proto.folders.MoveToTrashReply.FolderEntry.deserializeBinaryFromReader);
      msg.addFolders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.folders.MoveToTrashReply.HeadEntry.serializeBinaryToWriter
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.folders.MoveToTrashReply.FolderEntry.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.MoveToTrashReply.Status = {
  OK: 0,
  UNKNOWN: 1,
  NO_ACCESS: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashReply.HeadEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.MoveToTrashReply.HeadEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashReply.HeadEntry.displayName = 'proto.folders.MoveToTrashReply.HeadEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashReply.HeadEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashReply.HeadEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashReply.HeadEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.HeadEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashReply.HeadEntry}
 */
proto.folders.MoveToTrashReply.HeadEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashReply.HeadEntry;
  return proto.folders.MoveToTrashReply.HeadEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashReply.HeadEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashReply.HeadEntry}
 */
proto.folders.MoveToTrashReply.HeadEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.MoveToTrashReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashReply.HeadEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashReply.HeadEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashReply.HeadEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.HeadEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.folders.MoveToTrashReply.HeadEntry.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashReply.HeadEntry.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.MoveToTrashReply.Status}
 */
proto.folders.MoveToTrashReply.HeadEntry.prototype.getStatus = function() {
  return /** @type {!proto.folders.MoveToTrashReply.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.MoveToTrashReply.Status} value */
proto.folders.MoveToTrashReply.HeadEntry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashReply.FolderEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.MoveToTrashReply.FolderEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashReply.FolderEntry.displayName = 'proto.folders.MoveToTrashReply.FolderEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashReply.FolderEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashReply.FolderEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashReply.FolderEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.FolderEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashReply.FolderEntry}
 */
proto.folders.MoveToTrashReply.FolderEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashReply.FolderEntry;
  return proto.folders.MoveToTrashReply.FolderEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashReply.FolderEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashReply.FolderEntry}
 */
proto.folders.MoveToTrashReply.FolderEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.MoveToTrashReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashReply.FolderEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashReply.FolderEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashReply.FolderEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashReply.FolderEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string folder_id = 1;
 * @return {string}
 */
proto.folders.MoveToTrashReply.FolderEntry.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashReply.FolderEntry.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.MoveToTrashReply.Status}
 */
proto.folders.MoveToTrashReply.FolderEntry.prototype.getStatus = function() {
  return /** @type {!proto.folders.MoveToTrashReply.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.MoveToTrashReply.Status} value */
proto.folders.MoveToTrashReply.FolderEntry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated HeadEntry heads = 1;
 * @return {!Array.<!proto.folders.MoveToTrashReply.HeadEntry>}
 */
proto.folders.MoveToTrashReply.prototype.getHeadsList = function() {
  return /** @type{!Array.<!proto.folders.MoveToTrashReply.HeadEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.MoveToTrashReply.HeadEntry, 1));
};


/** @param {!Array.<!proto.folders.MoveToTrashReply.HeadEntry>} value */
proto.folders.MoveToTrashReply.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.folders.MoveToTrashReply.HeadEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.MoveToTrashReply.HeadEntry}
 */
proto.folders.MoveToTrashReply.prototype.addHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.folders.MoveToTrashReply.HeadEntry, opt_index);
};


proto.folders.MoveToTrashReply.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};


/**
 * repeated FolderEntry folders = 2;
 * @return {!Array.<!proto.folders.MoveToTrashReply.FolderEntry>}
 */
proto.folders.MoveToTrashReply.prototype.getFoldersList = function() {
  return /** @type{!Array.<!proto.folders.MoveToTrashReply.FolderEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.MoveToTrashReply.FolderEntry, 2));
};


/** @param {!Array.<!proto.folders.MoveToTrashReply.FolderEntry>} value */
proto.folders.MoveToTrashReply.prototype.setFoldersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.folders.MoveToTrashReply.FolderEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.MoveToTrashReply.FolderEntry}
 */
proto.folders.MoveToTrashReply.prototype.addFolders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.folders.MoveToTrashReply.FolderEntry, opt_index);
};


proto.folders.MoveToTrashReply.prototype.clearFoldersList = function() {
  this.setFoldersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.MoveToTrashRequest.repeatedFields_, null);
};
goog.inherits(proto.folders.MoveToTrashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashRequest.displayName = 'proto.folders.MoveToTrashRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.MoveToTrashRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    headsList: jspb.Message.toObjectList(msg.getHeadsList(),
    proto.folders.MoveToTrashRequest.HeadEntry.toObject, includeInstance),
    foldersList: jspb.Message.toObjectList(msg.getFoldersList(),
    proto.folders.MoveToTrashRequest.FolderEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashRequest}
 */
proto.folders.MoveToTrashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashRequest;
  return proto.folders.MoveToTrashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashRequest}
 */
proto.folders.MoveToTrashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.folders.MoveToTrashRequest.HeadEntry;
      reader.readMessage(value,proto.folders.MoveToTrashRequest.HeadEntry.deserializeBinaryFromReader);
      msg.addHeads(value);
      break;
    case 2:
      var value = new proto.folders.MoveToTrashRequest.FolderEntry;
      reader.readMessage(value,proto.folders.MoveToTrashRequest.FolderEntry.deserializeBinaryFromReader);
      msg.addFolders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.folders.MoveToTrashRequest.HeadEntry.serializeBinaryToWriter
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.folders.MoveToTrashRequest.FolderEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashRequest.HeadEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.MoveToTrashRequest.HeadEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashRequest.HeadEntry.displayName = 'proto.folders.MoveToTrashRequest.HeadEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashRequest.HeadEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashRequest.HeadEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.HeadEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashRequest.HeadEntry}
 */
proto.folders.MoveToTrashRequest.HeadEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashRequest.HeadEntry;
  return proto.folders.MoveToTrashRequest.HeadEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashRequest.HeadEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashRequest.HeadEntry}
 */
proto.folders.MoveToTrashRequest.HeadEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashRequest.HeadEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashRequest.HeadEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.HeadEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent_id = 1;
 * @return {string}
 */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.getParentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.setParentId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string head_id = 2;
 * @return {string}
 */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashRequest.HeadEntry.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.MoveToTrashRequest.FolderEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.MoveToTrashRequest.FolderEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.MoveToTrashRequest.FolderEntry.displayName = 'proto.folders.MoveToTrashRequest.FolderEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.MoveToTrashRequest.FolderEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.MoveToTrashRequest.FolderEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.FolderEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    folderId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.MoveToTrashRequest.FolderEntry}
 */
proto.folders.MoveToTrashRequest.FolderEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.MoveToTrashRequest.FolderEntry;
  return proto.folders.MoveToTrashRequest.FolderEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.MoveToTrashRequest.FolderEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.MoveToTrashRequest.FolderEntry}
 */
proto.folders.MoveToTrashRequest.FolderEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.MoveToTrashRequest.FolderEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.MoveToTrashRequest.FolderEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.MoveToTrashRequest.FolderEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent_id = 1;
 * @return {string}
 */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.getParentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.setParentId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string folder_id = 2;
 * @return {string}
 */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.folders.MoveToTrashRequest.FolderEntry.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HeadEntry heads = 1;
 * @return {!Array.<!proto.folders.MoveToTrashRequest.HeadEntry>}
 */
proto.folders.MoveToTrashRequest.prototype.getHeadsList = function() {
  return /** @type{!Array.<!proto.folders.MoveToTrashRequest.HeadEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.MoveToTrashRequest.HeadEntry, 1));
};


/** @param {!Array.<!proto.folders.MoveToTrashRequest.HeadEntry>} value */
proto.folders.MoveToTrashRequest.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.folders.MoveToTrashRequest.HeadEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.MoveToTrashRequest.HeadEntry}
 */
proto.folders.MoveToTrashRequest.prototype.addHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.folders.MoveToTrashRequest.HeadEntry, opt_index);
};


proto.folders.MoveToTrashRequest.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};


/**
 * repeated FolderEntry folders = 2;
 * @return {!Array.<!proto.folders.MoveToTrashRequest.FolderEntry>}
 */
proto.folders.MoveToTrashRequest.prototype.getFoldersList = function() {
  return /** @type{!Array.<!proto.folders.MoveToTrashRequest.FolderEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.MoveToTrashRequest.FolderEntry, 2));
};


/** @param {!Array.<!proto.folders.MoveToTrashRequest.FolderEntry>} value */
proto.folders.MoveToTrashRequest.prototype.setFoldersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.folders.MoveToTrashRequest.FolderEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.MoveToTrashRequest.FolderEntry}
 */
proto.folders.MoveToTrashRequest.prototype.addFolders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.folders.MoveToTrashRequest.FolderEntry, opt_index);
};


proto.folders.MoveToTrashRequest.prototype.clearFoldersList = function() {
  this.setFoldersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetTrashReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.GetTrashReply.oneofGroups_);
};
goog.inherits(proto.folders.GetTrashReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetTrashReply.displayName = 'proto.folders.GetTrashReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.GetTrashReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.folders.GetTrashReply.ResultCase = {
  RESULT_NOT_SET: 0,
  TRASH: 1,
  ERROR: 2
};

/**
 * @return {proto.folders.GetTrashReply.ResultCase}
 */
proto.folders.GetTrashReply.prototype.getResultCase = function() {
  return /** @type {proto.folders.GetTrashReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.folders.GetTrashReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetTrashReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetTrashReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetTrashReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    trash: (f = msg.getTrash()) && domain_pb.Trash.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.folders.GetTrashReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetTrashReply}
 */
proto.folders.GetTrashReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetTrashReply;
  return proto.folders.GetTrashReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetTrashReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetTrashReply}
 */
proto.folders.GetTrashReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Trash;
      reader.readMessage(value,domain_pb.Trash.deserializeBinaryFromReader);
      msg.setTrash(value);
      break;
    case 2:
      var value = new proto.folders.GetTrashReply.Error;
      reader.readMessage(value,proto.folders.GetTrashReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetTrashReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetTrashReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetTrashReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.Trash.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.folders.GetTrashReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetTrashReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.GetTrashReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetTrashReply.Error.displayName = 'proto.folders.GetTrashReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetTrashReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetTrashReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetTrashReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetTrashReply.Error}
 */
proto.folders.GetTrashReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetTrashReply.Error;
  return proto.folders.GetTrashReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetTrashReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetTrashReply.Error}
 */
proto.folders.GetTrashReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.GetTrashReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetTrashReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetTrashReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetTrashReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.GetTrashReply.Error.Status = {
  UNKNOWN: 0
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.folders.GetTrashReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.GetTrashReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.GetTrashReply.Error.Status}
 */
proto.folders.GetTrashReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.folders.GetTrashReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.GetTrashReply.Error.Status} value */
proto.folders.GetTrashReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Trash trash = 1;
 * @return {?proto.domain.Trash}
 */
proto.folders.GetTrashReply.prototype.getTrash = function() {
  return /** @type{?proto.domain.Trash} */ (
    jspb.Message.getWrapperField(this, domain_pb.Trash, 1));
};


/** @param {?proto.domain.Trash|undefined} value */
proto.folders.GetTrashReply.prototype.setTrash = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.folders.GetTrashReply.oneofGroups_[0], value);
};


proto.folders.GetTrashReply.prototype.clearTrash = function() {
  this.setTrash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.GetTrashReply.prototype.hasTrash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.folders.GetTrashReply.Error}
 */
proto.folders.GetTrashReply.prototype.getError = function() {
  return /** @type{?proto.folders.GetTrashReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.folders.GetTrashReply.Error, 2));
};


/** @param {?proto.folders.GetTrashReply.Error|undefined} value */
proto.folders.GetTrashReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.folders.GetTrashReply.oneofGroups_[0], value);
};


proto.folders.GetTrashReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.GetTrashReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetTrashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.GetTrashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetTrashRequest.displayName = 'proto.folders.GetTrashRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetTrashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetTrashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetTrashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetTrashRequest}
 */
proto.folders.GetTrashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetTrashRequest;
  return proto.folders.GetTrashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetTrashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetTrashRequest}
 */
proto.folders.GetTrashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetTrashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetTrashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetTrashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetTrashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetRootReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.GetRootReply.oneofGroups_);
};
goog.inherits(proto.folders.GetRootReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetRootReply.displayName = 'proto.folders.GetRootReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.GetRootReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.folders.GetRootReply.ResultCase = {
  RESULT_NOT_SET: 0,
  FOLDER: 1,
  ERROR: 2
};

/**
 * @return {proto.folders.GetRootReply.ResultCase}
 */
proto.folders.GetRootReply.prototype.getResultCase = function() {
  return /** @type {proto.folders.GetRootReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.folders.GetRootReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetRootReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetRootReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetRootReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    folder: (f = msg.getFolder()) && domain_pb.Folder.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.folders.GetRootReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetRootReply}
 */
proto.folders.GetRootReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetRootReply;
  return proto.folders.GetRootReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetRootReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetRootReply}
 */
proto.folders.GetRootReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Folder;
      reader.readMessage(value,domain_pb.Folder.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    case 2:
      var value = new proto.folders.GetRootReply.Error;
      reader.readMessage(value,proto.folders.GetRootReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetRootReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetRootReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetRootReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.Folder.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.folders.GetRootReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetRootReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.GetRootReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetRootReply.Error.displayName = 'proto.folders.GetRootReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetRootReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetRootReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetRootReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetRootReply.Error}
 */
proto.folders.GetRootReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetRootReply.Error;
  return proto.folders.GetRootReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetRootReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetRootReply.Error}
 */
proto.folders.GetRootReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.GetRootReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetRootReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetRootReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetRootReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.GetRootReply.Error.Status = {
  UNKNOWN: 0
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.folders.GetRootReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.GetRootReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.GetRootReply.Error.Status}
 */
proto.folders.GetRootReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.folders.GetRootReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.GetRootReply.Error.Status} value */
proto.folders.GetRootReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Folder folder = 1;
 * @return {?proto.domain.Folder}
 */
proto.folders.GetRootReply.prototype.getFolder = function() {
  return /** @type{?proto.domain.Folder} */ (
    jspb.Message.getWrapperField(this, domain_pb.Folder, 1));
};


/** @param {?proto.domain.Folder|undefined} value */
proto.folders.GetRootReply.prototype.setFolder = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.folders.GetRootReply.oneofGroups_[0], value);
};


proto.folders.GetRootReply.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.GetRootReply.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.folders.GetRootReply.Error}
 */
proto.folders.GetRootReply.prototype.getError = function() {
  return /** @type{?proto.folders.GetRootReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.folders.GetRootReply.Error, 2));
};


/** @param {?proto.folders.GetRootReply.Error|undefined} value */
proto.folders.GetRootReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.folders.GetRootReply.oneofGroups_[0], value);
};


proto.folders.GetRootReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.GetRootReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.GetRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetRootRequest.displayName = 'proto.folders.GetRootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetRootRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetRootRequest}
 */
proto.folders.GetRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetRootRequest;
  return proto.folders.GetRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetRootRequest}
 */
proto.folders.GetRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetRootRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetRootRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.CreateFolderReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.folders.CreateFolderReply.oneofGroups_);
};
goog.inherits(proto.folders.CreateFolderReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.CreateFolderReply.displayName = 'proto.folders.CreateFolderReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.folders.CreateFolderReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.folders.CreateFolderReply.ResultCase = {
  RESULT_NOT_SET: 0,
  NEW_FOLDER_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.folders.CreateFolderReply.ResultCase}
 */
proto.folders.CreateFolderReply.prototype.getResultCase = function() {
  return /** @type {proto.folders.CreateFolderReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.folders.CreateFolderReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.CreateFolderReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.CreateFolderReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.CreateFolderReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    newFolderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.folders.CreateFolderReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.CreateFolderReply}
 */
proto.folders.CreateFolderReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.CreateFolderReply;
  return proto.folders.CreateFolderReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.CreateFolderReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.CreateFolderReply}
 */
proto.folders.CreateFolderReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewFolderId(value);
      break;
    case 2:
      var value = new proto.folders.CreateFolderReply.Error;
      reader.readMessage(value,proto.folders.CreateFolderReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.CreateFolderReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.CreateFolderReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.CreateFolderReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.folders.CreateFolderReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.CreateFolderReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.CreateFolderReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.CreateFolderReply.Error.displayName = 'proto.folders.CreateFolderReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.CreateFolderReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.CreateFolderReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.CreateFolderReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.CreateFolderReply.Error}
 */
proto.folders.CreateFolderReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.CreateFolderReply.Error;
  return proto.folders.CreateFolderReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.CreateFolderReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.CreateFolderReply.Error}
 */
proto.folders.CreateFolderReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.CreateFolderReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.CreateFolderReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.CreateFolderReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.CreateFolderReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.CreateFolderReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.folders.CreateFolderReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.CreateFolderReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.CreateFolderReply.Error.Status}
 */
proto.folders.CreateFolderReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.folders.CreateFolderReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.CreateFolderReply.Error.Status} value */
proto.folders.CreateFolderReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string new_folder_id = 1;
 * @return {string}
 */
proto.folders.CreateFolderReply.prototype.getNewFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.CreateFolderReply.prototype.setNewFolderId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.folders.CreateFolderReply.oneofGroups_[0], value);
};


proto.folders.CreateFolderReply.prototype.clearNewFolderId = function() {
  jspb.Message.setOneofField(this, 1, proto.folders.CreateFolderReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.CreateFolderReply.prototype.hasNewFolderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.folders.CreateFolderReply.Error}
 */
proto.folders.CreateFolderReply.prototype.getError = function() {
  return /** @type{?proto.folders.CreateFolderReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.folders.CreateFolderReply.Error, 2));
};


/** @param {?proto.folders.CreateFolderReply.Error|undefined} value */
proto.folders.CreateFolderReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.folders.CreateFolderReply.oneofGroups_[0], value);
};


proto.folders.CreateFolderReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.CreateFolderReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.CreateFolderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.CreateFolderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.CreateFolderRequest.displayName = 'proto.folders.CreateFolderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.CreateFolderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.CreateFolderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.CreateFolderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.CreateFolderRequest}
 */
proto.folders.CreateFolderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.CreateFolderRequest;
  return proto.folders.CreateFolderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.CreateFolderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.CreateFolderRequest}
 */
proto.folders.CreateFolderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.CreateFolderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.CreateFolderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.CreateFolderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.CreateFolderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.folders.CreateFolderRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.CreateFolderRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination_id = 2;
 * @return {string}
 */
proto.folders.CreateFolderRequest.prototype.getDestinationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.folders.CreateFolderRequest.prototype.setDestinationId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetFoldersReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.GetFoldersReply.repeatedFields_, null);
};
goog.inherits(proto.folders.GetFoldersReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetFoldersReply.displayName = 'proto.folders.GetFoldersReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.GetFoldersReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetFoldersReply.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetFoldersReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetFoldersReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.folders.GetFoldersReply.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetFoldersReply}
 */
proto.folders.GetFoldersReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetFoldersReply;
  return proto.folders.GetFoldersReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetFoldersReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetFoldersReply}
 */
proto.folders.GetFoldersReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.folders.GetFoldersReply.Entry;
      reader.readMessage(value,proto.folders.GetFoldersReply.Entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetFoldersReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetFoldersReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetFoldersReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.folders.GetFoldersReply.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.folders.GetFoldersReply.Status = {
  OK: 0,
  UNKNOWN: 1,
  NO_ACCESS: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetFoldersReply.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.folders.GetFoldersReply.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetFoldersReply.Entry.displayName = 'proto.folders.GetFoldersReply.Entry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetFoldersReply.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetFoldersReply.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetFoldersReply.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersReply.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    folder: (f = msg.getFolder()) && domain_pb.Folder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetFoldersReply.Entry}
 */
proto.folders.GetFoldersReply.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetFoldersReply.Entry;
  return proto.folders.GetFoldersReply.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetFoldersReply.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetFoldersReply.Entry}
 */
proto.folders.GetFoldersReply.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    case 2:
      var value = /** @type {!proto.folders.GetFoldersReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new domain_pb.Folder;
      reader.readMessage(value,domain_pb.Folder.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetFoldersReply.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetFoldersReply.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetFoldersReply.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersReply.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.Folder.serializeBinaryToWriter
    );
  }
};


/**
 * optional string folder_id = 1;
 * @return {string}
 */
proto.folders.GetFoldersReply.Entry.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.folders.GetFoldersReply.Entry.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.folders.GetFoldersReply.Status}
 */
proto.folders.GetFoldersReply.Entry.prototype.getStatus = function() {
  return /** @type {!proto.folders.GetFoldersReply.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.folders.GetFoldersReply.Status} value */
proto.folders.GetFoldersReply.Entry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Folder folder = 3;
 * @return {?proto.domain.Folder}
 */
proto.folders.GetFoldersReply.Entry.prototype.getFolder = function() {
  return /** @type{?proto.domain.Folder} */ (
    jspb.Message.getWrapperField(this, domain_pb.Folder, 3));
};


/** @param {?proto.domain.Folder|undefined} value */
proto.folders.GetFoldersReply.Entry.prototype.setFolder = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.folders.GetFoldersReply.Entry.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.folders.GetFoldersReply.Entry.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Entry entries = 1;
 * @return {!Array.<!proto.folders.GetFoldersReply.Entry>}
 */
proto.folders.GetFoldersReply.prototype.getEntriesList = function() {
  return /** @type{!Array.<!proto.folders.GetFoldersReply.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.folders.GetFoldersReply.Entry, 1));
};


/** @param {!Array.<!proto.folders.GetFoldersReply.Entry>} value */
proto.folders.GetFoldersReply.prototype.setEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.folders.GetFoldersReply.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.folders.GetFoldersReply.Entry}
 */
proto.folders.GetFoldersReply.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.folders.GetFoldersReply.Entry, opt_index);
};


proto.folders.GetFoldersReply.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.folders.GetFoldersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.folders.GetFoldersRequest.repeatedFields_, null);
};
goog.inherits(proto.folders.GetFoldersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.folders.GetFoldersRequest.displayName = 'proto.folders.GetFoldersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.folders.GetFoldersRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.folders.GetFoldersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.folders.GetFoldersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.folders.GetFoldersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.folders.GetFoldersRequest}
 */
proto.folders.GetFoldersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.folders.GetFoldersRequest;
  return proto.folders.GetFoldersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.folders.GetFoldersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.folders.GetFoldersRequest}
 */
proto.folders.GetFoldersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFolderIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.folders.GetFoldersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.folders.GetFoldersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.folders.GetFoldersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.folders.GetFoldersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string folder_ids = 1;
 * @return {!Array.<string>}
 */
proto.folders.GetFoldersRequest.prototype.getFolderIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.folders.GetFoldersRequest.prototype.setFolderIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.folders.GetFoldersRequest.prototype.addFolderIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.folders.GetFoldersRequest.prototype.clearFolderIdsList = function() {
  this.setFolderIdsList([]);
};


goog.object.extend(exports, proto.folders);
