/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var domain_pb = require('./domain_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.examination.ApplyAnswerReply', null, global);
goog.exportSymbol('proto.examination.ApplyAnswerReply.Error', null, global);
goog.exportSymbol('proto.examination.ApplyAnswerReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.ApplyAnswerRequest', null, global);
goog.exportSymbol('proto.examination.CompleteSubmissionReply', null, global);
goog.exportSymbol('proto.examination.CompleteSubmissionReply.Error', null, global);
goog.exportSymbol('proto.examination.CompleteSubmissionReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.CompleteSubmissionRequest', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsPreviewsReply', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsPreviewsReply.Entry', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsPreviewsReply.Status', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsPreviewsRequest', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsReply', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsReply.Error', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsReply.HeadList', null, global);
goog.exportSymbol('proto.examination.GetProblemSetsRequest', null, global);
goog.exportSymbol('proto.examination.GetReportReply', null, global);
goog.exportSymbol('proto.examination.GetReportReply.Error', null, global);
goog.exportSymbol('proto.examination.GetReportReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.GetReportRequest', null, global);
goog.exportSymbol('proto.examination.GetReportsReply', null, global);
goog.exportSymbol('proto.examination.GetReportsReply.Error', null, global);
goog.exportSymbol('proto.examination.GetReportsReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.GetReportsReply.ReportsList', null, global);
goog.exportSymbol('proto.examination.GetReportsRequest', null, global);
goog.exportSymbol('proto.examination.GetSubmissionReply', null, global);
goog.exportSymbol('proto.examination.GetSubmissionReply.Error', null, global);
goog.exportSymbol('proto.examination.GetSubmissionReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.GetSubmissionRequest', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsPreviewsReply', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsPreviewsReply.Entry', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsPreviewsReply.Status', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsPreviewsRequest', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsReply', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsReply.Error', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsReply.Submissions', null, global);
goog.exportSymbol('proto.examination.GetSubmissionsRequest', null, global);
goog.exportSymbol('proto.examination.ShareReportReply', null, global);
goog.exportSymbol('proto.examination.ShareReportReply.Error', null, global);
goog.exportSymbol('proto.examination.ShareReportReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.ShareReportRequest', null, global);
goog.exportSymbol('proto.examination.StartSubmissionReply', null, global);
goog.exportSymbol('proto.examination.StartSubmissionReply.Error', null, global);
goog.exportSymbol('proto.examination.StartSubmissionReply.Error.Status', null, global);
goog.exportSymbol('proto.examination.StartSubmissionRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsPreviewsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetSubmissionsPreviewsRequest.repeatedFields_, null);
};
goog.inherits(proto.examination.GetSubmissionsPreviewsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsPreviewsRequest.displayName = 'proto.examination.GetSubmissionsPreviewsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetSubmissionsPreviewsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsPreviewsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsPreviewsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsPreviewsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsPreviewsRequest}
 */
proto.examination.GetSubmissionsPreviewsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsPreviewsRequest;
  return proto.examination.GetSubmissionsPreviewsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsPreviewsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsPreviewsRequest}
 */
proto.examination.GetSubmissionsPreviewsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubmissionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsPreviewsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsPreviewsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsPreviewsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string submission_ids = 1;
 * @return {!Array.<string>}
 */
proto.examination.GetSubmissionsPreviewsRequest.prototype.getSubmissionIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.examination.GetSubmissionsPreviewsRequest.prototype.setSubmissionIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.GetSubmissionsPreviewsRequest.prototype.addSubmissionIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.examination.GetSubmissionsPreviewsRequest.prototype.clearSubmissionIdsList = function() {
  this.setSubmissionIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsPreviewsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetSubmissionsPreviewsReply.repeatedFields_, null);
};
goog.inherits(proto.examination.GetSubmissionsPreviewsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsPreviewsReply.displayName = 'proto.examination.GetSubmissionsPreviewsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetSubmissionsPreviewsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsPreviewsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsPreviewsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsPreviewsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    previewsList: jspb.Message.toObjectList(msg.getPreviewsList(),
    proto.examination.GetSubmissionsPreviewsReply.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsPreviewsReply}
 */
proto.examination.GetSubmissionsPreviewsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsPreviewsReply;
  return proto.examination.GetSubmissionsPreviewsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsPreviewsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsPreviewsReply}
 */
proto.examination.GetSubmissionsPreviewsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.GetSubmissionsPreviewsReply.Entry;
      reader.readMessage(value,proto.examination.GetSubmissionsPreviewsReply.Entry.deserializeBinaryFromReader);
      msg.addPreviews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsPreviewsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsPreviewsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsPreviewsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.examination.GetSubmissionsPreviewsReply.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetSubmissionsPreviewsReply.Status = {
  OK: 0,
  UNKNOWN: 1,
  NO_ACCESS: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsPreviewsReply.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetSubmissionsPreviewsReply.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsPreviewsReply.Entry.displayName = 'proto.examination.GetSubmissionsPreviewsReply.Entry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsPreviewsReply.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsPreviewsReply.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    preview: (f = msg.getPreview()) && domain_pb.SubmissionPreview.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsPreviewsReply.Entry}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsPreviewsReply.Entry;
  return proto.examination.GetSubmissionsPreviewsReply.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsPreviewsReply.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsPreviewsReply.Entry}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.examination.GetSubmissionsPreviewsReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new domain_pb.SubmissionPreview;
      reader.readMessage(value,domain_pb.SubmissionPreview.deserializeBinaryFromReader);
      msg.setPreview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsPreviewsReply.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsPreviewsReply.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPreview();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_pb.SubmissionPreview.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.examination.GetSubmissionsPreviewsReply.Status}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetSubmissionsPreviewsReply.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.examination.GetSubmissionsPreviewsReply.Status} value */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional domain.SubmissionPreview preview = 2;
 * @return {?proto.domain.SubmissionPreview}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.getPreview = function() {
  return /** @type{?proto.domain.SubmissionPreview} */ (
    jspb.Message.getWrapperField(this, domain_pb.SubmissionPreview, 2));
};


/** @param {?proto.domain.SubmissionPreview|undefined} value */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.setPreview = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.clearPreview = function() {
  this.setPreview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetSubmissionsPreviewsReply.Entry.prototype.hasPreview = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Entry previews = 1;
 * @return {!Array.<!proto.examination.GetSubmissionsPreviewsReply.Entry>}
 */
proto.examination.GetSubmissionsPreviewsReply.prototype.getPreviewsList = function() {
  return /** @type{!Array.<!proto.examination.GetSubmissionsPreviewsReply.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.examination.GetSubmissionsPreviewsReply.Entry, 1));
};


/** @param {!Array.<!proto.examination.GetSubmissionsPreviewsReply.Entry>} value */
proto.examination.GetSubmissionsPreviewsReply.prototype.setPreviewsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.examination.GetSubmissionsPreviewsReply.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.examination.GetSubmissionsPreviewsReply.Entry}
 */
proto.examination.GetSubmissionsPreviewsReply.prototype.addPreviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.examination.GetSubmissionsPreviewsReply.Entry, opt_index);
};


proto.examination.GetSubmissionsPreviewsReply.prototype.clearPreviewsList = function() {
  this.setPreviewsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsPreviewsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetProblemSetsPreviewsRequest.repeatedFields_, null);
};
goog.inherits(proto.examination.GetProblemSetsPreviewsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsPreviewsRequest.displayName = 'proto.examination.GetProblemSetsPreviewsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetProblemSetsPreviewsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsPreviewsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsPreviewsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsPreviewsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsPreviewsRequest}
 */
proto.examination.GetProblemSetsPreviewsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsPreviewsRequest;
  return proto.examination.GetProblemSetsPreviewsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsPreviewsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsPreviewsRequest}
 */
proto.examination.GetProblemSetsPreviewsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommitIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsPreviewsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsPreviewsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsPreviewsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string commit_ids = 1;
 * @return {!Array.<string>}
 */
proto.examination.GetProblemSetsPreviewsRequest.prototype.getCommitIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.examination.GetProblemSetsPreviewsRequest.prototype.setCommitIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.GetProblemSetsPreviewsRequest.prototype.addCommitIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.examination.GetProblemSetsPreviewsRequest.prototype.clearCommitIdsList = function() {
  this.setCommitIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsPreviewsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetProblemSetsPreviewsReply.repeatedFields_, null);
};
goog.inherits(proto.examination.GetProblemSetsPreviewsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsPreviewsReply.displayName = 'proto.examination.GetProblemSetsPreviewsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetProblemSetsPreviewsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsPreviewsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsPreviewsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsPreviewsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    previewsList: jspb.Message.toObjectList(msg.getPreviewsList(),
    proto.examination.GetProblemSetsPreviewsReply.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsPreviewsReply}
 */
proto.examination.GetProblemSetsPreviewsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsPreviewsReply;
  return proto.examination.GetProblemSetsPreviewsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsPreviewsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsPreviewsReply}
 */
proto.examination.GetProblemSetsPreviewsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.GetProblemSetsPreviewsReply.Entry;
      reader.readMessage(value,proto.examination.GetProblemSetsPreviewsReply.Entry.deserializeBinaryFromReader);
      msg.addPreviews(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsPreviewsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsPreviewsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsPreviewsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.examination.GetProblemSetsPreviewsReply.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetProblemSetsPreviewsReply.Status = {
  OK: 0,
  UNKNOWN: 1,
  NO_ACCESS: 2,
  NOT_FOUND: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsPreviewsReply.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetProblemSetsPreviewsReply.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsPreviewsReply.Entry.displayName = 'proto.examination.GetProblemSetsPreviewsReply.Entry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsPreviewsReply.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsPreviewsReply.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commitId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    preview: (f = msg.getPreview()) && domain_pb.ProblemSetPreview.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsPreviewsReply.Entry}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsPreviewsReply.Entry;
  return proto.examination.GetProblemSetsPreviewsReply.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsPreviewsReply.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsPreviewsReply.Entry}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.examination.GetProblemSetsPreviewsReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 3:
      var value = new domain_pb.ProblemSetPreview;
      reader.readMessage(value,domain_pb.ProblemSetPreview.deserializeBinaryFromReader);
      msg.setPreview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsPreviewsReply.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsPreviewsReply.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreview();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.ProblemSetPreview.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.examination.GetProblemSetsPreviewsReply.Status}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetProblemSetsPreviewsReply.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.examination.GetProblemSetsPreviewsReply.Status} value */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string commit_id = 2;
 * @return {string}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.setCommitId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional domain.ProblemSetPreview preview = 3;
 * @return {?proto.domain.ProblemSetPreview}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.getPreview = function() {
  return /** @type{?proto.domain.ProblemSetPreview} */ (
    jspb.Message.getWrapperField(this, domain_pb.ProblemSetPreview, 3));
};


/** @param {?proto.domain.ProblemSetPreview|undefined} value */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.setPreview = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.clearPreview = function() {
  this.setPreview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsPreviewsReply.Entry.prototype.hasPreview = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Entry previews = 1;
 * @return {!Array.<!proto.examination.GetProblemSetsPreviewsReply.Entry>}
 */
proto.examination.GetProblemSetsPreviewsReply.prototype.getPreviewsList = function() {
  return /** @type{!Array.<!proto.examination.GetProblemSetsPreviewsReply.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.examination.GetProblemSetsPreviewsReply.Entry, 1));
};


/** @param {!Array.<!proto.examination.GetProblemSetsPreviewsReply.Entry>} value */
proto.examination.GetProblemSetsPreviewsReply.prototype.setPreviewsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.examination.GetProblemSetsPreviewsReply.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.examination.GetProblemSetsPreviewsReply.Entry}
 */
proto.examination.GetProblemSetsPreviewsReply.prototype.addPreviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.examination.GetProblemSetsPreviewsReply.Entry, opt_index);
};


proto.examination.GetProblemSetsPreviewsReply.prototype.clearPreviewsList = function() {
  this.setPreviewsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetProblemSetsRequest.repeatedFields_, null);
};
goog.inherits(proto.examination.GetProblemSetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsRequest.displayName = 'proto.examination.GetProblemSetsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetProblemSetsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    isPublic: jspb.Message.getFieldWithDefault(msg, 1, false),
    pattern: (f = msg.getPattern()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    tagsList: jspb.Message.getRepeatedField(msg, 3),
    authorId: (f = msg.getAuthorId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    problemsCount: (f = msg.getProblemsCount()) && domain_pb.UInt32Interval.toObject(includeInstance, f),
    durationS: (f = msg.getDurationS()) && domain_pb.Int32Interval.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 7, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsRequest}
 */
proto.examination.GetProblemSetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsRequest;
  return proto.examination.GetProblemSetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsRequest}
 */
proto.examination.GetProblemSetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublic(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setAuthorId(value);
      break;
    case 5:
      var value = new domain_pb.UInt32Interval;
      reader.readMessage(value,domain_pb.UInt32Interval.deserializeBinaryFromReader);
      msg.setProblemsCount(value);
      break;
    case 6:
      var value = new domain_pb.Int32Interval;
      reader.readMessage(value,domain_pb.Int32Interval.deserializeBinaryFromReader);
      msg.setDurationS(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAuthorId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getProblemsCount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      domain_pb.UInt32Interval.serializeBinaryToWriter
    );
  }
  f = message.getDurationS();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      domain_pb.Int32Interval.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional bool is_public = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.examination.GetProblemSetsRequest.prototype.getIsPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.examination.GetProblemSetsRequest.prototype.setIsPublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue pattern = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.examination.GetProblemSetsRequest.prototype.getPattern = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.examination.GetProblemSetsRequest.prototype.setPattern = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.examination.GetProblemSetsRequest.prototype.clearPattern = function() {
  this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsRequest.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string tags = 3;
 * @return {!Array.<string>}
 */
proto.examination.GetProblemSetsRequest.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.examination.GetProblemSetsRequest.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.GetProblemSetsRequest.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.examination.GetProblemSetsRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional google.protobuf.StringValue author_id = 4;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.examination.GetProblemSetsRequest.prototype.getAuthorId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 4));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.examination.GetProblemSetsRequest.prototype.setAuthorId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.examination.GetProblemSetsRequest.prototype.clearAuthorId = function() {
  this.setAuthorId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsRequest.prototype.hasAuthorId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional domain.UInt32Interval problems_count = 5;
 * @return {?proto.domain.UInt32Interval}
 */
proto.examination.GetProblemSetsRequest.prototype.getProblemsCount = function() {
  return /** @type{?proto.domain.UInt32Interval} */ (
    jspb.Message.getWrapperField(this, domain_pb.UInt32Interval, 5));
};


/** @param {?proto.domain.UInt32Interval|undefined} value */
proto.examination.GetProblemSetsRequest.prototype.setProblemsCount = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.examination.GetProblemSetsRequest.prototype.clearProblemsCount = function() {
  this.setProblemsCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsRequest.prototype.hasProblemsCount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional domain.Int32Interval duration_s = 6;
 * @return {?proto.domain.Int32Interval}
 */
proto.examination.GetProblemSetsRequest.prototype.getDurationS = function() {
  return /** @type{?proto.domain.Int32Interval} */ (
    jspb.Message.getWrapperField(this, domain_pb.Int32Interval, 6));
};


/** @param {?proto.domain.Int32Interval|undefined} value */
proto.examination.GetProblemSetsRequest.prototype.setDurationS = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.examination.GetProblemSetsRequest.prototype.clearDurationS = function() {
  this.setDurationS(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsRequest.prototype.hasDurationS = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 offset = 7;
 * @return {number}
 */
proto.examination.GetProblemSetsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.examination.GetProblemSetsRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 limit = 8;
 * @return {number}
 */
proto.examination.GetProblemSetsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.examination.GetProblemSetsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.GetProblemSetsReply.oneofGroups_);
};
goog.inherits(proto.examination.GetProblemSetsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsReply.displayName = 'proto.examination.GetProblemSetsReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.GetProblemSetsReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.GetProblemSetsReply.ResultCase = {
  RESULT_NOT_SET: 0,
  HEADS: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.GetProblemSetsReply.ResultCase}
 */
proto.examination.GetProblemSetsReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.GetProblemSetsReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.GetProblemSetsReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    heads: (f = msg.getHeads()) && proto.examination.GetProblemSetsReply.HeadList.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.examination.GetProblemSetsReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsReply}
 */
proto.examination.GetProblemSetsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsReply;
  return proto.examination.GetProblemSetsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsReply}
 */
proto.examination.GetProblemSetsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.GetProblemSetsReply.HeadList;
      reader.readMessage(value,proto.examination.GetProblemSetsReply.HeadList.deserializeBinaryFromReader);
      msg.setHeads(value);
      break;
    case 2:
      var value = new proto.examination.GetProblemSetsReply.Error;
      reader.readMessage(value,proto.examination.GetProblemSetsReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeads();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.examination.GetProblemSetsReply.HeadList.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.GetProblemSetsReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsReply.HeadList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetProblemSetsReply.HeadList.repeatedFields_, null);
};
goog.inherits(proto.examination.GetProblemSetsReply.HeadList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsReply.HeadList.displayName = 'proto.examination.GetProblemSetsReply.HeadList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetProblemSetsReply.HeadList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsReply.HeadList.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsReply.HeadList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsReply.HeadList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.HeadList.toObject = function(includeInstance, msg) {
  var f, obj = {
    headsList: jspb.Message.toObjectList(msg.getHeadsList(),
    domain_pb.Head.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsReply.HeadList}
 */
proto.examination.GetProblemSetsReply.HeadList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsReply.HeadList;
  return proto.examination.GetProblemSetsReply.HeadList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsReply.HeadList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsReply.HeadList}
 */
proto.examination.GetProblemSetsReply.HeadList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Head;
      reader.readMessage(value,domain_pb.Head.deserializeBinaryFromReader);
      msg.addHeads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsReply.HeadList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsReply.HeadList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsReply.HeadList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.HeadList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      domain_pb.Head.serializeBinaryToWriter
    );
  }
};


/**
 * repeated domain.Head heads = 1;
 * @return {!Array.<!proto.domain.Head>}
 */
proto.examination.GetProblemSetsReply.HeadList.prototype.getHeadsList = function() {
  return /** @type{!Array.<!proto.domain.Head>} */ (
    jspb.Message.getRepeatedWrapperField(this, domain_pb.Head, 1));
};


/** @param {!Array.<!proto.domain.Head>} value */
proto.examination.GetProblemSetsReply.HeadList.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.Head=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.Head}
 */
proto.examination.GetProblemSetsReply.HeadList.prototype.addHeads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.Head, opt_index);
};


proto.examination.GetProblemSetsReply.HeadList.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetProblemSetsReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetProblemSetsReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetProblemSetsReply.Error.displayName = 'proto.examination.GetProblemSetsReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetProblemSetsReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetProblemSetsReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetProblemSetsReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetProblemSetsReply.Error}
 */
proto.examination.GetProblemSetsReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetProblemSetsReply.Error;
  return proto.examination.GetProblemSetsReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetProblemSetsReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetProblemSetsReply.Error}
 */
proto.examination.GetProblemSetsReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.GetProblemSetsReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetProblemSetsReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetProblemSetsReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetProblemSetsReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetProblemSetsReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetProblemSetsReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.GetProblemSetsReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetProblemSetsReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.GetProblemSetsReply.Error.Status}
 */
proto.examination.GetProblemSetsReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetProblemSetsReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.GetProblemSetsReply.Error.Status} value */
proto.examination.GetProblemSetsReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional HeadList heads = 1;
 * @return {?proto.examination.GetProblemSetsReply.HeadList}
 */
proto.examination.GetProblemSetsReply.prototype.getHeads = function() {
  return /** @type{?proto.examination.GetProblemSetsReply.HeadList} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetProblemSetsReply.HeadList, 1));
};


/** @param {?proto.examination.GetProblemSetsReply.HeadList|undefined} value */
proto.examination.GetProblemSetsReply.prototype.setHeads = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.GetProblemSetsReply.oneofGroups_[0], value);
};


proto.examination.GetProblemSetsReply.prototype.clearHeads = function() {
  this.setHeads(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsReply.prototype.hasHeads = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.GetProblemSetsReply.Error}
 */
proto.examination.GetProblemSetsReply.prototype.getError = function() {
  return /** @type{?proto.examination.GetProblemSetsReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetProblemSetsReply.Error, 2));
};


/** @param {?proto.examination.GetProblemSetsReply.Error|undefined} value */
proto.examination.GetProblemSetsReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.GetProblemSetsReply.oneofGroups_[0], value);
};


proto.examination.GetProblemSetsReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetProblemSetsReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ShareReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.ShareReportRequest.repeatedFields_, null);
};
goog.inherits(proto.examination.ShareReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ShareReportRequest.displayName = 'proto.examination.ShareReportRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.ShareReportRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ShareReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ShareReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ShareReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userIdsList: jspb.Message.getRepeatedField(msg, 2),
    groupIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ShareReportRequest}
 */
proto.examination.ShareReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ShareReportRequest;
  return proto.examination.ShareReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ShareReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ShareReportRequest}
 */
proto.examination.ShareReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ShareReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ShareReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ShareReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getGroupIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string report_id = 1;
 * @return {string}
 */
proto.examination.ShareReportRequest.prototype.getReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.ShareReportRequest.prototype.setReportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string user_ids = 2;
 * @return {!Array.<string>}
 */
proto.examination.ShareReportRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.examination.ShareReportRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.ShareReportRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.examination.ShareReportRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};


/**
 * repeated string group_ids = 3;
 * @return {!Array.<string>}
 */
proto.examination.ShareReportRequest.prototype.getGroupIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.examination.ShareReportRequest.prototype.setGroupIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.ShareReportRequest.prototype.addGroupIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.examination.ShareReportRequest.prototype.clearGroupIdsList = function() {
  this.setGroupIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ShareReportReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.ShareReportReply.oneofGroups_);
};
goog.inherits(proto.examination.ShareReportReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ShareReportReply.displayName = 'proto.examination.ShareReportReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.ShareReportReply.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.examination.ShareReportReply.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 1
};

/**
 * @return {proto.examination.ShareReportReply.ResultCase}
 */
proto.examination.ShareReportReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.ShareReportReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.ShareReportReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ShareReportReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ShareReportReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ShareReportReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.examination.ShareReportReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ShareReportReply}
 */
proto.examination.ShareReportReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ShareReportReply;
  return proto.examination.ShareReportReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ShareReportReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ShareReportReply}
 */
proto.examination.ShareReportReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.ShareReportReply.Error;
      reader.readMessage(value,proto.examination.ShareReportReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ShareReportReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ShareReportReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ShareReportReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.examination.ShareReportReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ShareReportReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.ShareReportReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ShareReportReply.Error.displayName = 'proto.examination.ShareReportReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ShareReportReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ShareReportReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ShareReportReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ShareReportReply.Error}
 */
proto.examination.ShareReportReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ShareReportReply.Error;
  return proto.examination.ShareReportReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ShareReportReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ShareReportReply.Error}
 */
proto.examination.ShareReportReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.ShareReportReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ShareReportReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ShareReportReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ShareReportReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ShareReportReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.ShareReportReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.ShareReportReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.ShareReportReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.ShareReportReply.Error.Status}
 */
proto.examination.ShareReportReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.ShareReportReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.ShareReportReply.Error.Status} value */
proto.examination.ShareReportReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.examination.ShareReportReply.Error}
 */
proto.examination.ShareReportReply.prototype.getError = function() {
  return /** @type{?proto.examination.ShareReportReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.ShareReportReply.Error, 1));
};


/** @param {?proto.examination.ShareReportReply.Error|undefined} value */
proto.examination.ShareReportReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.ShareReportReply.oneofGroups_[0], value);
};


proto.examination.ShareReportReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.ShareReportReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetReportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportsRequest.displayName = 'proto.examination.GetReportsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pattern: (f = msg.getPattern()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    userId: (f = msg.getUserId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    dateInterval: (f = msg.getDateInterval()) && domain_pb.DateInterval.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportsRequest}
 */
proto.examination.GetReportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportsRequest;
  return proto.examination.GetReportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportsRequest}
 */
proto.examination.GetReportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 3:
      var value = new domain_pb.DateInterval;
      reader.readMessage(value,domain_pb.DateInterval.deserializeBinaryFromReader);
      msg.setDateInterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getDateInterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.DateInterval.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional google.protobuf.StringValue pattern = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.examination.GetReportsRequest.prototype.getPattern = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 1));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.examination.GetReportsRequest.prototype.setPattern = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.examination.GetReportsRequest.prototype.clearPattern = function() {
  this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportsRequest.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.StringValue user_id = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.examination.GetReportsRequest.prototype.getUserId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.examination.GetReportsRequest.prototype.setUserId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.examination.GetReportsRequest.prototype.clearUserId = function() {
  this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportsRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional domain.DateInterval date_interval = 3;
 * @return {?proto.domain.DateInterval}
 */
proto.examination.GetReportsRequest.prototype.getDateInterval = function() {
  return /** @type{?proto.domain.DateInterval} */ (
    jspb.Message.getWrapperField(this, domain_pb.DateInterval, 3));
};


/** @param {?proto.domain.DateInterval|undefined} value */
proto.examination.GetReportsRequest.prototype.setDateInterval = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.examination.GetReportsRequest.prototype.clearDateInterval = function() {
  this.setDateInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportsRequest.prototype.hasDateInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 offset = 4;
 * @return {number}
 */
proto.examination.GetReportsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.examination.GetReportsRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 limit = 5;
 * @return {number}
 */
proto.examination.GetReportsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.examination.GetReportsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.GetReportsReply.oneofGroups_);
};
goog.inherits(proto.examination.GetReportsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportsReply.displayName = 'proto.examination.GetReportsReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.GetReportsReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.GetReportsReply.ResultCase = {
  RESULT_NOT_SET: 0,
  REPORTS: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.GetReportsReply.ResultCase}
 */
proto.examination.GetReportsReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.GetReportsReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.GetReportsReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    reports: (f = msg.getReports()) && proto.examination.GetReportsReply.ReportsList.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.examination.GetReportsReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportsReply}
 */
proto.examination.GetReportsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportsReply;
  return proto.examination.GetReportsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportsReply}
 */
proto.examination.GetReportsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.GetReportsReply.ReportsList;
      reader.readMessage(value,proto.examination.GetReportsReply.ReportsList.deserializeBinaryFromReader);
      msg.setReports(value);
      break;
    case 2:
      var value = new proto.examination.GetReportsReply.Error;
      reader.readMessage(value,proto.examination.GetReportsReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReports();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.examination.GetReportsReply.ReportsList.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.GetReportsReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportsReply.ReportsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetReportsReply.ReportsList.repeatedFields_, null);
};
goog.inherits(proto.examination.GetReportsReply.ReportsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportsReply.ReportsList.displayName = 'proto.examination.GetReportsReply.ReportsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetReportsReply.ReportsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportsReply.ReportsList.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportsReply.ReportsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportsReply.ReportsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.ReportsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportsList: jspb.Message.toObjectList(msg.getReportsList(),
    domain_pb.Report.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportsReply.ReportsList}
 */
proto.examination.GetReportsReply.ReportsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportsReply.ReportsList;
  return proto.examination.GetReportsReply.ReportsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportsReply.ReportsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportsReply.ReportsList}
 */
proto.examination.GetReportsReply.ReportsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Report;
      reader.readMessage(value,domain_pb.Report.deserializeBinaryFromReader);
      msg.addReports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportsReply.ReportsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportsReply.ReportsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportsReply.ReportsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.ReportsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      domain_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * repeated domain.Report reports = 1;
 * @return {!Array.<!proto.domain.Report>}
 */
proto.examination.GetReportsReply.ReportsList.prototype.getReportsList = function() {
  return /** @type{!Array.<!proto.domain.Report>} */ (
    jspb.Message.getRepeatedWrapperField(this, domain_pb.Report, 1));
};


/** @param {!Array.<!proto.domain.Report>} value */
proto.examination.GetReportsReply.ReportsList.prototype.setReportsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.Report=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.Report}
 */
proto.examination.GetReportsReply.ReportsList.prototype.addReports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.Report, opt_index);
};


proto.examination.GetReportsReply.ReportsList.prototype.clearReportsList = function() {
  this.setReportsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportsReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetReportsReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportsReply.Error.displayName = 'proto.examination.GetReportsReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportsReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportsReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportsReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportsReply.Error}
 */
proto.examination.GetReportsReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportsReply.Error;
  return proto.examination.GetReportsReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportsReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportsReply.Error}
 */
proto.examination.GetReportsReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.GetReportsReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportsReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportsReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportsReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportsReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetReportsReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.GetReportsReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetReportsReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.GetReportsReply.Error.Status}
 */
proto.examination.GetReportsReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetReportsReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.GetReportsReply.Error.Status} value */
proto.examination.GetReportsReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ReportsList reports = 1;
 * @return {?proto.examination.GetReportsReply.ReportsList}
 */
proto.examination.GetReportsReply.prototype.getReports = function() {
  return /** @type{?proto.examination.GetReportsReply.ReportsList} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetReportsReply.ReportsList, 1));
};


/** @param {?proto.examination.GetReportsReply.ReportsList|undefined} value */
proto.examination.GetReportsReply.prototype.setReports = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.GetReportsReply.oneofGroups_[0], value);
};


proto.examination.GetReportsReply.prototype.clearReports = function() {
  this.setReports(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportsReply.prototype.hasReports = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.GetReportsReply.Error}
 */
proto.examination.GetReportsReply.prototype.getError = function() {
  return /** @type{?proto.examination.GetReportsReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetReportsReply.Error, 2));
};


/** @param {?proto.examination.GetReportsReply.Error|undefined} value */
proto.examination.GetReportsReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.GetReportsReply.oneofGroups_[0], value);
};


proto.examination.GetReportsReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportsReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetSubmissionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsRequest.displayName = 'proto.examination.GetSubmissionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsRequest}
 */
proto.examination.GetSubmissionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsRequest;
  return proto.examination.GetSubmissionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsRequest}
 */
proto.examination.GetSubmissionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.GetSubmissionsReply.oneofGroups_);
};
goog.inherits(proto.examination.GetSubmissionsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsReply.displayName = 'proto.examination.GetSubmissionsReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.GetSubmissionsReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.GetSubmissionsReply.ResultCase = {
  RESULT_NOT_SET: 0,
  SUBMISSIONS: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.GetSubmissionsReply.ResultCase}
 */
proto.examination.GetSubmissionsReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.GetSubmissionsReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.GetSubmissionsReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissions: (f = msg.getSubmissions()) && proto.examination.GetSubmissionsReply.Submissions.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.examination.GetSubmissionsReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsReply}
 */
proto.examination.GetSubmissionsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsReply;
  return proto.examination.GetSubmissionsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsReply}
 */
proto.examination.GetSubmissionsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.GetSubmissionsReply.Submissions;
      reader.readMessage(value,proto.examination.GetSubmissionsReply.Submissions.deserializeBinaryFromReader);
      msg.setSubmissions(value);
      break;
    case 2:
      var value = new proto.examination.GetSubmissionsReply.Error;
      reader.readMessage(value,proto.examination.GetSubmissionsReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.examination.GetSubmissionsReply.Submissions.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.GetSubmissionsReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsReply.Submissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.examination.GetSubmissionsReply.Submissions.repeatedFields_, null);
};
goog.inherits(proto.examination.GetSubmissionsReply.Submissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsReply.Submissions.displayName = 'proto.examination.GetSubmissionsReply.Submissions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.examination.GetSubmissionsReply.Submissions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsReply.Submissions.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsReply.Submissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsReply.Submissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.Submissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsReply.Submissions}
 */
proto.examination.GetSubmissionsReply.Submissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsReply.Submissions;
  return proto.examination.GetSubmissionsReply.Submissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsReply.Submissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsReply.Submissions}
 */
proto.examination.GetSubmissionsReply.Submissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubmissionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsReply.Submissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsReply.Submissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsReply.Submissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.Submissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string submission_ids = 1;
 * @return {!Array.<string>}
 */
proto.examination.GetSubmissionsReply.Submissions.prototype.getSubmissionIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.examination.GetSubmissionsReply.Submissions.prototype.setSubmissionIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.examination.GetSubmissionsReply.Submissions.prototype.addSubmissionIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.examination.GetSubmissionsReply.Submissions.prototype.clearSubmissionIdsList = function() {
  this.setSubmissionIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionsReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetSubmissionsReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionsReply.Error.displayName = 'proto.examination.GetSubmissionsReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionsReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionsReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionsReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionsReply.Error}
 */
proto.examination.GetSubmissionsReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionsReply.Error;
  return proto.examination.GetSubmissionsReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionsReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionsReply.Error}
 */
proto.examination.GetSubmissionsReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.GetSubmissionsReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionsReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionsReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionsReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionsReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetSubmissionsReply.Error.Status = {
  UNKNOWN: 0
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.GetSubmissionsReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetSubmissionsReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.GetSubmissionsReply.Error.Status}
 */
proto.examination.GetSubmissionsReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetSubmissionsReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.GetSubmissionsReply.Error.Status} value */
proto.examination.GetSubmissionsReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Submissions submissions = 1;
 * @return {?proto.examination.GetSubmissionsReply.Submissions}
 */
proto.examination.GetSubmissionsReply.prototype.getSubmissions = function() {
  return /** @type{?proto.examination.GetSubmissionsReply.Submissions} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetSubmissionsReply.Submissions, 1));
};


/** @param {?proto.examination.GetSubmissionsReply.Submissions|undefined} value */
proto.examination.GetSubmissionsReply.prototype.setSubmissions = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.GetSubmissionsReply.oneofGroups_[0], value);
};


proto.examination.GetSubmissionsReply.prototype.clearSubmissions = function() {
  this.setSubmissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetSubmissionsReply.prototype.hasSubmissions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.GetSubmissionsReply.Error}
 */
proto.examination.GetSubmissionsReply.prototype.getError = function() {
  return /** @type{?proto.examination.GetSubmissionsReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetSubmissionsReply.Error, 2));
};


/** @param {?proto.examination.GetSubmissionsReply.Error|undefined} value */
proto.examination.GetSubmissionsReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.GetSubmissionsReply.oneofGroups_[0], value);
};


proto.examination.GetSubmissionsReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetSubmissionsReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportRequest.displayName = 'proto.examination.GetReportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportRequest}
 */
proto.examination.GetReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportRequest;
  return proto.examination.GetReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportRequest}
 */
proto.examination.GetReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string report_id = 1;
 * @return {string}
 */
proto.examination.GetReportRequest.prototype.getReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetReportRequest.prototype.setReportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.GetReportReply.oneofGroups_);
};
goog.inherits(proto.examination.GetReportReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportReply.displayName = 'proto.examination.GetReportReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.GetReportReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.GetReportReply.ResultCase = {
  RESULT_NOT_SET: 0,
  REPORT: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.GetReportReply.ResultCase}
 */
proto.examination.GetReportReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.GetReportReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.GetReportReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    report: (f = msg.getReport()) && domain_pb.Report.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.examination.GetReportReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportReply}
 */
proto.examination.GetReportReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportReply;
  return proto.examination.GetReportReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportReply}
 */
proto.examination.GetReportReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Report;
      reader.readMessage(value,domain_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    case 2:
      var value = new proto.examination.GetReportReply.Error;
      reader.readMessage(value,proto.examination.GetReportReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.Report.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.GetReportReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetReportReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetReportReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetReportReply.Error.displayName = 'proto.examination.GetReportReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetReportReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetReportReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetReportReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetReportReply.Error}
 */
proto.examination.GetReportReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetReportReply.Error;
  return proto.examination.GetReportReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetReportReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetReportReply.Error}
 */
proto.examination.GetReportReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.GetReportReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetReportReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetReportReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetReportReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetReportReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetReportReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.GetReportReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetReportReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.GetReportReply.Error.Status}
 */
proto.examination.GetReportReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetReportReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.GetReportReply.Error.Status} value */
proto.examination.GetReportReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Report report = 1;
 * @return {?proto.domain.Report}
 */
proto.examination.GetReportReply.prototype.getReport = function() {
  return /** @type{?proto.domain.Report} */ (
    jspb.Message.getWrapperField(this, domain_pb.Report, 1));
};


/** @param {?proto.domain.Report|undefined} value */
proto.examination.GetReportReply.prototype.setReport = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.GetReportReply.oneofGroups_[0], value);
};


proto.examination.GetReportReply.prototype.clearReport = function() {
  this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportReply.prototype.hasReport = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.GetReportReply.Error}
 */
proto.examination.GetReportReply.prototype.getError = function() {
  return /** @type{?proto.examination.GetReportReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetReportReply.Error, 2));
};


/** @param {?proto.examination.GetReportReply.Error|undefined} value */
proto.examination.GetReportReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.GetReportReply.oneofGroups_[0], value);
};


proto.examination.GetReportReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetReportReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.StartSubmissionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.StartSubmissionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.StartSubmissionRequest.displayName = 'proto.examination.StartSubmissionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.StartSubmissionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.StartSubmissionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.StartSubmissionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    problemSetHeadId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.StartSubmissionRequest}
 */
proto.examination.StartSubmissionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.StartSubmissionRequest;
  return proto.examination.StartSubmissionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.StartSubmissionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.StartSubmissionRequest}
 */
proto.examination.StartSubmissionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProblemSetHeadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.StartSubmissionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.StartSubmissionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.StartSubmissionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProblemSetHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string problem_set_head_id = 1;
 * @return {string}
 */
proto.examination.StartSubmissionRequest.prototype.getProblemSetHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.StartSubmissionRequest.prototype.setProblemSetHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.StartSubmissionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.StartSubmissionReply.oneofGroups_);
};
goog.inherits(proto.examination.StartSubmissionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.StartSubmissionReply.displayName = 'proto.examination.StartSubmissionReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.StartSubmissionReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.StartSubmissionReply.ResultCase = {
  RESULT_NOT_SET: 0,
  SUBMISSION_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.StartSubmissionReply.ResultCase}
 */
proto.examination.StartSubmissionReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.StartSubmissionReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.StartSubmissionReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.StartSubmissionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.StartSubmissionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.StartSubmissionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.examination.StartSubmissionReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.StartSubmissionReply}
 */
proto.examination.StartSubmissionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.StartSubmissionReply;
  return proto.examination.StartSubmissionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.StartSubmissionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.StartSubmissionReply}
 */
proto.examination.StartSubmissionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmissionId(value);
      break;
    case 2:
      var value = new proto.examination.StartSubmissionReply.Error;
      reader.readMessage(value,proto.examination.StartSubmissionReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.StartSubmissionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.StartSubmissionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.StartSubmissionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.StartSubmissionReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.StartSubmissionReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.StartSubmissionReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.StartSubmissionReply.Error.displayName = 'proto.examination.StartSubmissionReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.StartSubmissionReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.StartSubmissionReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.StartSubmissionReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.StartSubmissionReply.Error}
 */
proto.examination.StartSubmissionReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.StartSubmissionReply.Error;
  return proto.examination.StartSubmissionReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.StartSubmissionReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.StartSubmissionReply.Error}
 */
proto.examination.StartSubmissionReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.StartSubmissionReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.StartSubmissionReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.StartSubmissionReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.StartSubmissionReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.StartSubmissionReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.StartSubmissionReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  HEAD_NOT_FOUND: 2,
  WRONG_HEAD_TYPE: 3,
  CANNOT_START_SUBMISSION: 4
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.StartSubmissionReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.StartSubmissionReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.StartSubmissionReply.Error.Status}
 */
proto.examination.StartSubmissionReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.StartSubmissionReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.StartSubmissionReply.Error.Status} value */
proto.examination.StartSubmissionReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string submission_id = 1;
 * @return {string}
 */
proto.examination.StartSubmissionReply.prototype.getSubmissionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.StartSubmissionReply.prototype.setSubmissionId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.examination.StartSubmissionReply.oneofGroups_[0], value);
};


proto.examination.StartSubmissionReply.prototype.clearSubmissionId = function() {
  jspb.Message.setOneofField(this, 1, proto.examination.StartSubmissionReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.StartSubmissionReply.prototype.hasSubmissionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.StartSubmissionReply.Error}
 */
proto.examination.StartSubmissionReply.prototype.getError = function() {
  return /** @type{?proto.examination.StartSubmissionReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.StartSubmissionReply.Error, 2));
};


/** @param {?proto.examination.StartSubmissionReply.Error|undefined} value */
proto.examination.StartSubmissionReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.StartSubmissionReply.oneofGroups_[0], value);
};


proto.examination.StartSubmissionReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.StartSubmissionReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.CompleteSubmissionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.CompleteSubmissionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.CompleteSubmissionRequest.displayName = 'proto.examination.CompleteSubmissionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.CompleteSubmissionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.CompleteSubmissionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.CompleteSubmissionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.CompleteSubmissionRequest}
 */
proto.examination.CompleteSubmissionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.CompleteSubmissionRequest;
  return proto.examination.CompleteSubmissionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.CompleteSubmissionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.CompleteSubmissionRequest}
 */
proto.examination.CompleteSubmissionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmissionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.CompleteSubmissionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.CompleteSubmissionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.CompleteSubmissionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string submission_id = 1;
 * @return {string}
 */
proto.examination.CompleteSubmissionRequest.prototype.getSubmissionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.CompleteSubmissionRequest.prototype.setSubmissionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.CompleteSubmissionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.CompleteSubmissionReply.oneofGroups_);
};
goog.inherits(proto.examination.CompleteSubmissionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.CompleteSubmissionReply.displayName = 'proto.examination.CompleteSubmissionReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.CompleteSubmissionReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.CompleteSubmissionReply.ResultCase = {
  RESULT_NOT_SET: 0,
  REPORT_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.CompleteSubmissionReply.ResultCase}
 */
proto.examination.CompleteSubmissionReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.CompleteSubmissionReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.CompleteSubmissionReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.CompleteSubmissionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.CompleteSubmissionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.CompleteSubmissionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.examination.CompleteSubmissionReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.CompleteSubmissionReply}
 */
proto.examination.CompleteSubmissionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.CompleteSubmissionReply;
  return proto.examination.CompleteSubmissionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.CompleteSubmissionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.CompleteSubmissionReply}
 */
proto.examination.CompleteSubmissionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportId(value);
      break;
    case 2:
      var value = new proto.examination.CompleteSubmissionReply.Error;
      reader.readMessage(value,proto.examination.CompleteSubmissionReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.CompleteSubmissionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.CompleteSubmissionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.CompleteSubmissionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.CompleteSubmissionReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.CompleteSubmissionReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.CompleteSubmissionReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.CompleteSubmissionReply.Error.displayName = 'proto.examination.CompleteSubmissionReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.CompleteSubmissionReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.CompleteSubmissionReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.CompleteSubmissionReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.CompleteSubmissionReply.Error}
 */
proto.examination.CompleteSubmissionReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.CompleteSubmissionReply.Error;
  return proto.examination.CompleteSubmissionReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.CompleteSubmissionReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.CompleteSubmissionReply.Error}
 */
proto.examination.CompleteSubmissionReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.CompleteSubmissionReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.CompleteSubmissionReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.CompleteSubmissionReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.CompleteSubmissionReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.CompleteSubmissionReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.CompleteSubmissionReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.CompleteSubmissionReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.CompleteSubmissionReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.CompleteSubmissionReply.Error.Status}
 */
proto.examination.CompleteSubmissionReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.CompleteSubmissionReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.CompleteSubmissionReply.Error.Status} value */
proto.examination.CompleteSubmissionReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string report_id = 1;
 * @return {string}
 */
proto.examination.CompleteSubmissionReply.prototype.getReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.CompleteSubmissionReply.prototype.setReportId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.examination.CompleteSubmissionReply.oneofGroups_[0], value);
};


proto.examination.CompleteSubmissionReply.prototype.clearReportId = function() {
  jspb.Message.setOneofField(this, 1, proto.examination.CompleteSubmissionReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.CompleteSubmissionReply.prototype.hasReportId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.CompleteSubmissionReply.Error}
 */
proto.examination.CompleteSubmissionReply.prototype.getError = function() {
  return /** @type{?proto.examination.CompleteSubmissionReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.CompleteSubmissionReply.Error, 2));
};


/** @param {?proto.examination.CompleteSubmissionReply.Error|undefined} value */
proto.examination.CompleteSubmissionReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.CompleteSubmissionReply.oneofGroups_[0], value);
};


proto.examination.CompleteSubmissionReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.CompleteSubmissionReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetSubmissionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionRequest.displayName = 'proto.examination.GetSubmissionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionRequest}
 */
proto.examination.GetSubmissionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionRequest;
  return proto.examination.GetSubmissionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionRequest}
 */
proto.examination.GetSubmissionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmissionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string submission_id = 1;
 * @return {string}
 */
proto.examination.GetSubmissionRequest.prototype.getSubmissionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetSubmissionRequest.prototype.setSubmissionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.GetSubmissionReply.oneofGroups_);
};
goog.inherits(proto.examination.GetSubmissionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionReply.displayName = 'proto.examination.GetSubmissionReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.GetSubmissionReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.examination.GetSubmissionReply.ResultCase = {
  RESULT_NOT_SET: 0,
  SUBMISSION: 1,
  ERROR: 2
};

/**
 * @return {proto.examination.GetSubmissionReply.ResultCase}
 */
proto.examination.GetSubmissionReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.GetSubmissionReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.GetSubmissionReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    submission: (f = msg.getSubmission()) && domain_pb.Submission.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.examination.GetSubmissionReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionReply}
 */
proto.examination.GetSubmissionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionReply;
  return proto.examination.GetSubmissionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionReply}
 */
proto.examination.GetSubmissionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Submission;
      reader.readMessage(value,domain_pb.Submission.deserializeBinaryFromReader);
      msg.setSubmission(value);
      break;
    case 2:
      var value = new proto.examination.GetSubmissionReply.Error;
      reader.readMessage(value,proto.examination.GetSubmissionReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmission();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.Submission.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.examination.GetSubmissionReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.GetSubmissionReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.GetSubmissionReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.GetSubmissionReply.Error.displayName = 'proto.examination.GetSubmissionReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.GetSubmissionReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.GetSubmissionReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.GetSubmissionReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.GetSubmissionReply.Error}
 */
proto.examination.GetSubmissionReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.GetSubmissionReply.Error;
  return proto.examination.GetSubmissionReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.GetSubmissionReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.GetSubmissionReply.Error}
 */
proto.examination.GetSubmissionReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.GetSubmissionReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.GetSubmissionReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.GetSubmissionReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.GetSubmissionReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.GetSubmissionReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.GetSubmissionReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.GetSubmissionReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.GetSubmissionReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.GetSubmissionReply.Error.Status}
 */
proto.examination.GetSubmissionReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.GetSubmissionReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.GetSubmissionReply.Error.Status} value */
proto.examination.GetSubmissionReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Submission submission = 1;
 * @return {?proto.domain.Submission}
 */
proto.examination.GetSubmissionReply.prototype.getSubmission = function() {
  return /** @type{?proto.domain.Submission} */ (
    jspb.Message.getWrapperField(this, domain_pb.Submission, 1));
};


/** @param {?proto.domain.Submission|undefined} value */
proto.examination.GetSubmissionReply.prototype.setSubmission = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.GetSubmissionReply.oneofGroups_[0], value);
};


proto.examination.GetSubmissionReply.prototype.clearSubmission = function() {
  this.setSubmission(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetSubmissionReply.prototype.hasSubmission = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.examination.GetSubmissionReply.Error}
 */
proto.examination.GetSubmissionReply.prototype.getError = function() {
  return /** @type{?proto.examination.GetSubmissionReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.GetSubmissionReply.Error, 2));
};


/** @param {?proto.examination.GetSubmissionReply.Error|undefined} value */
proto.examination.GetSubmissionReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.examination.GetSubmissionReply.oneofGroups_[0], value);
};


proto.examination.GetSubmissionReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.GetSubmissionReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ApplyAnswerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.ApplyAnswerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ApplyAnswerRequest.displayName = 'proto.examination.ApplyAnswerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ApplyAnswerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ApplyAnswerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ApplyAnswerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    generatedProblemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    answer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ApplyAnswerRequest}
 */
proto.examination.ApplyAnswerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ApplyAnswerRequest;
  return proto.examination.ApplyAnswerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ApplyAnswerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ApplyAnswerRequest}
 */
proto.examination.ApplyAnswerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmissionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneratedProblemId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ApplyAnswerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ApplyAnswerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ApplyAnswerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneratedProblemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string submission_id = 1;
 * @return {string}
 */
proto.examination.ApplyAnswerRequest.prototype.getSubmissionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.ApplyAnswerRequest.prototype.setSubmissionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string generated_problem_id = 2;
 * @return {string}
 */
proto.examination.ApplyAnswerRequest.prototype.getGeneratedProblemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.examination.ApplyAnswerRequest.prototype.setGeneratedProblemId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string answer = 3;
 * @return {string}
 */
proto.examination.ApplyAnswerRequest.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.examination.ApplyAnswerRequest.prototype.setAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ApplyAnswerReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.examination.ApplyAnswerReply.oneofGroups_);
};
goog.inherits(proto.examination.ApplyAnswerReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ApplyAnswerReply.displayName = 'proto.examination.ApplyAnswerReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.examination.ApplyAnswerReply.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.examination.ApplyAnswerReply.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 1
};

/**
 * @return {proto.examination.ApplyAnswerReply.ResultCase}
 */
proto.examination.ApplyAnswerReply.prototype.getResultCase = function() {
  return /** @type {proto.examination.ApplyAnswerReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.examination.ApplyAnswerReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ApplyAnswerReply.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ApplyAnswerReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ApplyAnswerReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.examination.ApplyAnswerReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ApplyAnswerReply}
 */
proto.examination.ApplyAnswerReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ApplyAnswerReply;
  return proto.examination.ApplyAnswerReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ApplyAnswerReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ApplyAnswerReply}
 */
proto.examination.ApplyAnswerReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.examination.ApplyAnswerReply.Error;
      reader.readMessage(value,proto.examination.ApplyAnswerReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ApplyAnswerReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ApplyAnswerReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ApplyAnswerReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.examination.ApplyAnswerReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.examination.ApplyAnswerReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.examination.ApplyAnswerReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.examination.ApplyAnswerReply.Error.displayName = 'proto.examination.ApplyAnswerReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.examination.ApplyAnswerReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.examination.ApplyAnswerReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.examination.ApplyAnswerReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.examination.ApplyAnswerReply.Error}
 */
proto.examination.ApplyAnswerReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.examination.ApplyAnswerReply.Error;
  return proto.examination.ApplyAnswerReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.examination.ApplyAnswerReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.examination.ApplyAnswerReply.Error}
 */
proto.examination.ApplyAnswerReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.examination.ApplyAnswerReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.examination.ApplyAnswerReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.examination.ApplyAnswerReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.examination.ApplyAnswerReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.examination.ApplyAnswerReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.examination.ApplyAnswerReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.examination.ApplyAnswerReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.examination.ApplyAnswerReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.examination.ApplyAnswerReply.Error.Status}
 */
proto.examination.ApplyAnswerReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.examination.ApplyAnswerReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.examination.ApplyAnswerReply.Error.Status} value */
proto.examination.ApplyAnswerReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Error error = 1;
 * @return {?proto.examination.ApplyAnswerReply.Error}
 */
proto.examination.ApplyAnswerReply.prototype.getError = function() {
  return /** @type{?proto.examination.ApplyAnswerReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.examination.ApplyAnswerReply.Error, 1));
};


/** @param {?proto.examination.ApplyAnswerReply.Error|undefined} value */
proto.examination.ApplyAnswerReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.examination.ApplyAnswerReply.oneofGroups_[0], value);
};


proto.examination.ApplyAnswerReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.examination.ApplyAnswerReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.examination);
