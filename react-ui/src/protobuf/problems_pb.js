/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var domain_pb = require('./domain_pb.js');
goog.exportSymbol('proto.problems.CreateProblemReply', null, global);
goog.exportSymbol('proto.problems.CreateProblemReply.Error', null, global);
goog.exportSymbol('proto.problems.CreateProblemReply.Error.Status', null, global);
goog.exportSymbol('proto.problems.CreateProblemRequest', null, global);
goog.exportSymbol('proto.problems.GetProblemReply', null, global);
goog.exportSymbol('proto.problems.GetProblemReply.Error', null, global);
goog.exportSymbol('proto.problems.GetProblemReply.Error.Status', null, global);
goog.exportSymbol('proto.problems.GetProblemRequest', null, global);
goog.exportSymbol('proto.problems.TestProblemReply', null, global);
goog.exportSymbol('proto.problems.TestProblemReply.Error', null, global);
goog.exportSymbol('proto.problems.TestProblemReply.Error.Status', null, global);
goog.exportSymbol('proto.problems.TestProblemRequest', null, global);
goog.exportSymbol('proto.problems.UpdateProblemReply', null, global);
goog.exportSymbol('proto.problems.UpdateProblemReply.Error', null, global);
goog.exportSymbol('proto.problems.UpdateProblemReply.Error.Status', null, global);
goog.exportSymbol('proto.problems.UpdateProblemRequest', null, global);
goog.exportSymbol('proto.problems.ValidateReply', null, global);
goog.exportSymbol('proto.problems.ValidateReply.Error', null, global);
goog.exportSymbol('proto.problems.ValidateReply.Error.Status', null, global);
goog.exportSymbol('proto.problems.ValidateRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.UpdateProblemReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problems.UpdateProblemReply.oneofGroups_);
};
goog.inherits(proto.problems.UpdateProblemReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.UpdateProblemReply.displayName = 'proto.problems.UpdateProblemReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problems.UpdateProblemReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problems.UpdateProblemReply.ResultCase = {
  RESULT_NOT_SET: 0,
  COMMIT_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.problems.UpdateProblemReply.ResultCase}
 */
proto.problems.UpdateProblemReply.prototype.getResultCase = function() {
  return /** @type {proto.problems.UpdateProblemReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problems.UpdateProblemReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.UpdateProblemReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.UpdateProblemReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.UpdateProblemReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.problems.UpdateProblemReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.UpdateProblemReply}
 */
proto.problems.UpdateProblemReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.UpdateProblemReply;
  return proto.problems.UpdateProblemReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.UpdateProblemReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.UpdateProblemReply}
 */
proto.problems.UpdateProblemReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 2:
      var value = new proto.problems.UpdateProblemReply.Error;
      reader.readMessage(value,proto.problems.UpdateProblemReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.UpdateProblemReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.UpdateProblemReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.UpdateProblemReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problems.UpdateProblemReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.UpdateProblemReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.UpdateProblemReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.UpdateProblemReply.Error.displayName = 'proto.problems.UpdateProblemReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.UpdateProblemReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.UpdateProblemReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.UpdateProblemReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.UpdateProblemReply.Error}
 */
proto.problems.UpdateProblemReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.UpdateProblemReply.Error;
  return proto.problems.UpdateProblemReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.UpdateProblemReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.UpdateProblemReply.Error}
 */
proto.problems.UpdateProblemReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problems.UpdateProblemReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.UpdateProblemReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.UpdateProblemReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.UpdateProblemReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problems.UpdateProblemReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  INVALID_INPUT: 2
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problems.UpdateProblemReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.UpdateProblemReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problems.UpdateProblemReply.Error.Status}
 */
proto.problems.UpdateProblemReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problems.UpdateProblemReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problems.UpdateProblemReply.Error.Status} value */
proto.problems.UpdateProblemReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problems.UpdateProblemReply.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.UpdateProblemReply.prototype.setCommitId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.problems.UpdateProblemReply.oneofGroups_[0], value);
};


proto.problems.UpdateProblemReply.prototype.clearCommitId = function() {
  jspb.Message.setOneofField(this, 1, proto.problems.UpdateProblemReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.UpdateProblemReply.prototype.hasCommitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problems.UpdateProblemReply.Error}
 */
proto.problems.UpdateProblemReply.prototype.getError = function() {
  return /** @type{?proto.problems.UpdateProblemReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problems.UpdateProblemReply.Error, 2));
};


/** @param {?proto.problems.UpdateProblemReply.Error|undefined} value */
proto.problems.UpdateProblemReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problems.UpdateProblemReply.oneofGroups_[0], value);
};


proto.problems.UpdateProblemReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.UpdateProblemReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.UpdateProblemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.UpdateProblemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.UpdateProblemRequest.displayName = 'proto.problems.UpdateProblemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.UpdateProblemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.UpdateProblemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.UpdateProblemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    problem: (f = msg.getProblem()) && domain_pb.Problem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.UpdateProblemRequest}
 */
proto.problems.UpdateProblemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.UpdateProblemRequest;
  return proto.problems.UpdateProblemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.UpdateProblemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.UpdateProblemRequest}
 */
proto.problems.UpdateProblemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new domain_pb.Problem;
      reader.readMessage(value,domain_pb.Problem.deserializeBinaryFromReader);
      msg.setProblem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.UpdateProblemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.UpdateProblemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.UpdateProblemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.UpdateProblemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProblem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.Problem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.problems.UpdateProblemRequest.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.UpdateProblemRequest.prototype.setHeadId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.problems.UpdateProblemRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.problems.UpdateProblemRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional domain.Problem problem = 3;
 * @return {?proto.domain.Problem}
 */
proto.problems.UpdateProblemRequest.prototype.getProblem = function() {
  return /** @type{?proto.domain.Problem} */ (
    jspb.Message.getWrapperField(this, domain_pb.Problem, 3));
};


/** @param {?proto.domain.Problem|undefined} value */
proto.problems.UpdateProblemRequest.prototype.setProblem = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.problems.UpdateProblemRequest.prototype.clearProblem = function() {
  this.setProblem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.UpdateProblemRequest.prototype.hasProblem = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.CreateProblemReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problems.CreateProblemReply.oneofGroups_);
};
goog.inherits(proto.problems.CreateProblemReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.CreateProblemReply.displayName = 'proto.problems.CreateProblemReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problems.CreateProblemReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problems.CreateProblemReply.ResultCase = {
  RESULT_NOT_SET: 0,
  HEAD_ID: 1,
  ERROR: 2
};

/**
 * @return {proto.problems.CreateProblemReply.ResultCase}
 */
proto.problems.CreateProblemReply.prototype.getResultCase = function() {
  return /** @type {proto.problems.CreateProblemReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problems.CreateProblemReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.CreateProblemReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.CreateProblemReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.CreateProblemReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    headId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.problems.CreateProblemReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.CreateProblemReply}
 */
proto.problems.CreateProblemReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.CreateProblemReply;
  return proto.problems.CreateProblemReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.CreateProblemReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.CreateProblemReply}
 */
proto.problems.CreateProblemReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadId(value);
      break;
    case 2:
      var value = new proto.problems.CreateProblemReply.Error;
      reader.readMessage(value,proto.problems.CreateProblemReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.CreateProblemReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.CreateProblemReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.CreateProblemReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problems.CreateProblemReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.CreateProblemReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.CreateProblemReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.CreateProblemReply.Error.displayName = 'proto.problems.CreateProblemReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.CreateProblemReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.CreateProblemReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.CreateProblemReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.CreateProblemReply.Error}
 */
proto.problems.CreateProblemReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.CreateProblemReply.Error;
  return proto.problems.CreateProblemReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.CreateProblemReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.CreateProblemReply.Error}
 */
proto.problems.CreateProblemReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problems.CreateProblemReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.CreateProblemReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.CreateProblemReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.CreateProblemReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problems.CreateProblemReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  INVALID_INPUT: 2
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problems.CreateProblemReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.CreateProblemReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problems.CreateProblemReply.Error.Status}
 */
proto.problems.CreateProblemReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problems.CreateProblemReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problems.CreateProblemReply.Error.Status} value */
proto.problems.CreateProblemReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string head_id = 1;
 * @return {string}
 */
proto.problems.CreateProblemReply.prototype.getHeadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.CreateProblemReply.prototype.setHeadId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.problems.CreateProblemReply.oneofGroups_[0], value);
};


proto.problems.CreateProblemReply.prototype.clearHeadId = function() {
  jspb.Message.setOneofField(this, 1, proto.problems.CreateProblemReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.CreateProblemReply.prototype.hasHeadId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problems.CreateProblemReply.Error}
 */
proto.problems.CreateProblemReply.prototype.getError = function() {
  return /** @type{?proto.problems.CreateProblemReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problems.CreateProblemReply.Error, 2));
};


/** @param {?proto.problems.CreateProblemReply.Error|undefined} value */
proto.problems.CreateProblemReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problems.CreateProblemReply.oneofGroups_[0], value);
};


proto.problems.CreateProblemReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.CreateProblemReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.CreateProblemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.CreateProblemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.CreateProblemRequest.displayName = 'proto.problems.CreateProblemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.CreateProblemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.CreateProblemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.CreateProblemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    problem: (f = msg.getProblem()) && domain_pb.Problem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.CreateProblemRequest}
 */
proto.problems.CreateProblemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.CreateProblemRequest;
  return proto.problems.CreateProblemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.CreateProblemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.CreateProblemRequest}
 */
proto.problems.CreateProblemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new domain_pb.Problem;
      reader.readMessage(value,domain_pb.Problem.deserializeBinaryFromReader);
      msg.setProblem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.CreateProblemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.CreateProblemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.CreateProblemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.CreateProblemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProblem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      domain_pb.Problem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string folder_id = 1;
 * @return {string}
 */
proto.problems.CreateProblemRequest.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.CreateProblemRequest.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.problems.CreateProblemRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.problems.CreateProblemRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional domain.Problem problem = 3;
 * @return {?proto.domain.Problem}
 */
proto.problems.CreateProblemRequest.prototype.getProblem = function() {
  return /** @type{?proto.domain.Problem} */ (
    jspb.Message.getWrapperField(this, domain_pb.Problem, 3));
};


/** @param {?proto.domain.Problem|undefined} value */
proto.problems.CreateProblemRequest.prototype.setProblem = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.problems.CreateProblemRequest.prototype.clearProblem = function() {
  this.setProblem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.CreateProblemRequest.prototype.hasProblem = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.ValidateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problems.ValidateReply.oneofGroups_);
};
goog.inherits(proto.problems.ValidateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.ValidateReply.displayName = 'proto.problems.ValidateReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problems.ValidateReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problems.ValidateReply.ResultCase = {
  RESULT_NOT_SET: 0,
  IS_CORRECT: 1,
  ERROR: 2
};

/**
 * @return {proto.problems.ValidateReply.ResultCase}
 */
proto.problems.ValidateReply.prototype.getResultCase = function() {
  return /** @type {proto.problems.ValidateReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problems.ValidateReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.ValidateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.ValidateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.ValidateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCorrect: jspb.Message.getFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.problems.ValidateReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.ValidateReply}
 */
proto.problems.ValidateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.ValidateReply;
  return proto.problems.ValidateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.ValidateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.ValidateReply}
 */
proto.problems.ValidateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCorrect(value);
      break;
    case 2:
      var value = new proto.problems.ValidateReply.Error;
      reader.readMessage(value,proto.problems.ValidateReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.ValidateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.ValidateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.ValidateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problems.ValidateReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.ValidateReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.ValidateReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.ValidateReply.Error.displayName = 'proto.problems.ValidateReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.ValidateReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.ValidateReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.ValidateReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.ValidateReply.Error}
 */
proto.problems.ValidateReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.ValidateReply.Error;
  return proto.problems.ValidateReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.ValidateReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.ValidateReply.Error}
 */
proto.problems.ValidateReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problems.ValidateReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.ValidateReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.ValidateReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.ValidateReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problems.ValidateReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  NO_COMMIT: 2,
  INVALID_TYPE: 3
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problems.ValidateReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.ValidateReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problems.ValidateReply.Error.Status}
 */
proto.problems.ValidateReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problems.ValidateReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problems.ValidateReply.Error.Status} value */
proto.problems.ValidateReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool is_correct = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.problems.ValidateReply.prototype.getIsCorrect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.problems.ValidateReply.prototype.setIsCorrect = function(value) {
  jspb.Message.setOneofField(this, 1, proto.problems.ValidateReply.oneofGroups_[0], value);
};


proto.problems.ValidateReply.prototype.clearIsCorrect = function() {
  jspb.Message.setOneofField(this, 1, proto.problems.ValidateReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.ValidateReply.prototype.hasIsCorrect = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problems.ValidateReply.Error}
 */
proto.problems.ValidateReply.prototype.getError = function() {
  return /** @type{?proto.problems.ValidateReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problems.ValidateReply.Error, 2));
};


/** @param {?proto.problems.ValidateReply.Error|undefined} value */
proto.problems.ValidateReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problems.ValidateReply.oneofGroups_[0], value);
};


proto.problems.ValidateReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.ValidateReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.ValidateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.ValidateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.ValidateRequest.displayName = 'proto.problems.ValidateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.ValidateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.ValidateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.ValidateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actualAnswer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expectedAnswer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.ValidateRequest}
 */
proto.problems.ValidateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.ValidateRequest;
  return proto.problems.ValidateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.ValidateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.ValidateRequest}
 */
proto.problems.ValidateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActualAnswer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpectedAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.ValidateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.ValidateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.ValidateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.ValidateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActualAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpectedAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problems.ValidateRequest.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.ValidateRequest.prototype.setCommitId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actual_answer = 2;
 * @return {string}
 */
proto.problems.ValidateRequest.prototype.getActualAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.problems.ValidateRequest.prototype.setActualAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string expected_answer = 3;
 * @return {string}
 */
proto.problems.ValidateRequest.prototype.getExpectedAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.problems.ValidateRequest.prototype.setExpectedAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.TestProblemReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problems.TestProblemReply.oneofGroups_);
};
goog.inherits(proto.problems.TestProblemReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.TestProblemReply.displayName = 'proto.problems.TestProblemReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problems.TestProblemReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problems.TestProblemReply.ResultCase = {
  RESULT_NOT_SET: 0,
  PROBLEM: 1,
  ERROR: 2
};

/**
 * @return {proto.problems.TestProblemReply.ResultCase}
 */
proto.problems.TestProblemReply.prototype.getResultCase = function() {
  return /** @type {proto.problems.TestProblemReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problems.TestProblemReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.TestProblemReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.TestProblemReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.TestProblemReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    problem: (f = msg.getProblem()) && domain_pb.GeneratedProblem.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.problems.TestProblemReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.TestProblemReply}
 */
proto.problems.TestProblemReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.TestProblemReply;
  return proto.problems.TestProblemReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.TestProblemReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.TestProblemReply}
 */
proto.problems.TestProblemReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.GeneratedProblem;
      reader.readMessage(value,domain_pb.GeneratedProblem.deserializeBinaryFromReader);
      msg.setProblem(value);
      break;
    case 2:
      var value = new proto.problems.TestProblemReply.Error;
      reader.readMessage(value,proto.problems.TestProblemReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.TestProblemReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.TestProblemReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.TestProblemReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProblem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.GeneratedProblem.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problems.TestProblemReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.TestProblemReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.TestProblemReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.TestProblemReply.Error.displayName = 'proto.problems.TestProblemReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.TestProblemReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.TestProblemReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.TestProblemReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.TestProblemReply.Error}
 */
proto.problems.TestProblemReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.TestProblemReply.Error;
  return proto.problems.TestProblemReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.TestProblemReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.TestProblemReply.Error}
 */
proto.problems.TestProblemReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problems.TestProblemReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.TestProblemReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.TestProblemReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.TestProblemReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problems.TestProblemReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  NO_COMMIT: 2,
  INVALID_TYPE: 3
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problems.TestProblemReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.TestProblemReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problems.TestProblemReply.Error.Status}
 */
proto.problems.TestProblemReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problems.TestProblemReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problems.TestProblemReply.Error.Status} value */
proto.problems.TestProblemReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.GeneratedProblem problem = 1;
 * @return {?proto.domain.GeneratedProblem}
 */
proto.problems.TestProblemReply.prototype.getProblem = function() {
  return /** @type{?proto.domain.GeneratedProblem} */ (
    jspb.Message.getWrapperField(this, domain_pb.GeneratedProblem, 1));
};


/** @param {?proto.domain.GeneratedProblem|undefined} value */
proto.problems.TestProblemReply.prototype.setProblem = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.problems.TestProblemReply.oneofGroups_[0], value);
};


proto.problems.TestProblemReply.prototype.clearProblem = function() {
  this.setProblem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.TestProblemReply.prototype.hasProblem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problems.TestProblemReply.Error}
 */
proto.problems.TestProblemReply.prototype.getError = function() {
  return /** @type{?proto.problems.TestProblemReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problems.TestProblemReply.Error, 2));
};


/** @param {?proto.problems.TestProblemReply.Error|undefined} value */
proto.problems.TestProblemReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problems.TestProblemReply.oneofGroups_[0], value);
};


proto.problems.TestProblemReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.TestProblemReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.TestProblemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.TestProblemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.TestProblemRequest.displayName = 'proto.problems.TestProblemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.TestProblemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.TestProblemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.TestProblemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.TestProblemRequest}
 */
proto.problems.TestProblemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.TestProblemRequest;
  return proto.problems.TestProblemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.TestProblemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.TestProblemRequest}
 */
proto.problems.TestProblemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.TestProblemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.TestProblemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.TestProblemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.TestProblemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problems.TestProblemRequest.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.TestProblemRequest.prototype.setCommitId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 seed = 2;
 * @return {number}
 */
proto.problems.TestProblemRequest.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.problems.TestProblemRequest.prototype.setSeed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.GetProblemReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.problems.GetProblemReply.oneofGroups_);
};
goog.inherits(proto.problems.GetProblemReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.GetProblemReply.displayName = 'proto.problems.GetProblemReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.problems.GetProblemReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.problems.GetProblemReply.ResultCase = {
  RESULT_NOT_SET: 0,
  PROBLEM: 1,
  ERROR: 2
};

/**
 * @return {proto.problems.GetProblemReply.ResultCase}
 */
proto.problems.GetProblemReply.prototype.getResultCase = function() {
  return /** @type {proto.problems.GetProblemReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.problems.GetProblemReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.GetProblemReply.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.GetProblemReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.GetProblemReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    problem: (f = msg.getProblem()) && domain_pb.Problem.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.problems.GetProblemReply.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.GetProblemReply}
 */
proto.problems.GetProblemReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.GetProblemReply;
  return proto.problems.GetProblemReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.GetProblemReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.GetProblemReply}
 */
proto.problems.GetProblemReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_pb.Problem;
      reader.readMessage(value,domain_pb.Problem.deserializeBinaryFromReader);
      msg.setProblem(value);
      break;
    case 2:
      var value = new proto.problems.GetProblemReply.Error;
      reader.readMessage(value,proto.problems.GetProblemReply.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.GetProblemReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.GetProblemReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.GetProblemReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProblem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_pb.Problem.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.problems.GetProblemReply.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.GetProblemReply.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.GetProblemReply.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.GetProblemReply.Error.displayName = 'proto.problems.GetProblemReply.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.GetProblemReply.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.GetProblemReply.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.GetProblemReply.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemReply.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.GetProblemReply.Error}
 */
proto.problems.GetProblemReply.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.GetProblemReply.Error;
  return proto.problems.GetProblemReply.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.GetProblemReply.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.GetProblemReply.Error}
 */
proto.problems.GetProblemReply.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.problems.GetProblemReply.Error.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.GetProblemReply.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.GetProblemReply.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.GetProblemReply.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemReply.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.problems.GetProblemReply.Error.Status = {
  UNKNOWN: 0,
  NO_ACCESS: 1,
  NO_COMMIT: 2,
  INVALID_TYPE: 3
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.problems.GetProblemReply.Error.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.GetProblemReply.Error.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.problems.GetProblemReply.Error.Status}
 */
proto.problems.GetProblemReply.Error.prototype.getStatus = function() {
  return /** @type {!proto.problems.GetProblemReply.Error.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.problems.GetProblemReply.Error.Status} value */
proto.problems.GetProblemReply.Error.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional domain.Problem problem = 1;
 * @return {?proto.domain.Problem}
 */
proto.problems.GetProblemReply.prototype.getProblem = function() {
  return /** @type{?proto.domain.Problem} */ (
    jspb.Message.getWrapperField(this, domain_pb.Problem, 1));
};


/** @param {?proto.domain.Problem|undefined} value */
proto.problems.GetProblemReply.prototype.setProblem = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.problems.GetProblemReply.oneofGroups_[0], value);
};


proto.problems.GetProblemReply.prototype.clearProblem = function() {
  this.setProblem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.GetProblemReply.prototype.hasProblem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.problems.GetProblemReply.Error}
 */
proto.problems.GetProblemReply.prototype.getError = function() {
  return /** @type{?proto.problems.GetProblemReply.Error} */ (
    jspb.Message.getWrapperField(this, proto.problems.GetProblemReply.Error, 2));
};


/** @param {?proto.problems.GetProblemReply.Error|undefined} value */
proto.problems.GetProblemReply.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.problems.GetProblemReply.oneofGroups_[0], value);
};


proto.problems.GetProblemReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.problems.GetProblemReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.problems.GetProblemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.problems.GetProblemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.problems.GetProblemRequest.displayName = 'proto.problems.GetProblemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.problems.GetProblemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.problems.GetProblemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.problems.GetProblemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.problems.GetProblemRequest}
 */
proto.problems.GetProblemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.problems.GetProblemRequest;
  return proto.problems.GetProblemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.problems.GetProblemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.problems.GetProblemRequest}
 */
proto.problems.GetProblemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.problems.GetProblemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.problems.GetProblemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.problems.GetProblemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.problems.GetProblemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commit_id = 1;
 * @return {string}
 */
proto.problems.GetProblemRequest.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.problems.GetProblemRequest.prototype.setCommitId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.problems);
